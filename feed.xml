<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Storm Spirit</title>
    <description>这是我的中文博客，记录自己在技术、生活等方面的一些感想。博客叫 Storm Spirit， 因为我特别喜欢 Dota 里蓝猫这个英雄，可惜玩得不好…… 希望自己能够通过博客，得到成长。
</description>
    <link>http://wulfric.me/</link>
    <atom:link href="http://wulfric.me/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 07 Apr 2023 00:33:47 +0800</pubDate>
    <lastBuildDate>Fri, 07 Apr 2023 00:33:47 +0800</lastBuildDate>
    <generator>Jekyll v3.6.3</generator>
    <rights>wulfric © 2013~2023. All rights reserved.</rights>
    
      <item>
        <title>GPT2 论文翻译：Language Models are Unsupervised Multitask Learners</title>
        <description>&lt;p&gt;语言模型是无监督多任务学习者。&lt;/p&gt;

&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;

&lt;p&gt;自然语言处理任务，如问题回答、机器翻译、阅读理解和摘要，通常通过在特定任务的数据集上进行监督学习来解决。我们证明，当在一个名为WebText的包含数百万网页的新数据集上训练时，语言模型开始在没有任何明确监督的情况下学习这些任务。当基于文档和问题进行条件设置时，语言模型生成的答案在CoQA数据集上达到55 F1，在4个基线系统中，有3个实现了性能匹配或超越，而无需使用127,000+的训练样本。语言模型的容量对于零样本任务迁移的成功至关重要，增加容量可以在任务之间以对数线性方式提高性能。我们的最大模型，GPT-2，是一个拥有15亿参数的Transformer，在没有借助训练数据的零样本情况下，在8个测试的语言建模数据集中的7个上实现了顶尖水平的表现，但在适应WebText方面仍有不足。模型生成的样本展示了这些改进，包含连贯的文本段落。这些发现表明，我们有望构建能够通过自然场景中的示例来学习执行任务的语言处理系统。&lt;/p&gt;

&lt;h2 id=&quot;1-导言&quot;&gt;1. 导言&lt;/h2&gt;

&lt;p&gt;如今，机器学习系统在所训练任务上表现优异，这得益于大型数据集、高容量模型和监督学习的相互结合（Krizhevsky等人，2012）（Sutskever等人，2014）（Amodei等人，2016）。然而，当面临数据分布（Recht等人，2018）和任务规格的微小变化（Kirkpatrick等人，2017）时，这些系统表现出脆弱性和敏感性。当前的系统更像是狭义的专家，而非胜任多项任务的通才。我们希望发展更具通用性的系统，能够执行许多任务，最终无需为每个任务手动创建和标注训练数据集。&lt;/p&gt;

&lt;p&gt;创建机器学习系统的主要方法是收集展示目标任务正确行为的训练示例数据集，训练一个系统以模仿这些行为，然后在独立且相同分布（IID）的保留样本上测试其性能。这种方法在培养狭义专家方面取得了良好成果。然而，字幕模型（Lake等人，2017）、阅读理解系统（Jia和Liang，2017）以及图像分类器（Alcorn等人，2018）在处理多样性、多种类的输入数据的不稳定行为，凸显了这种方法的局限性。&lt;/p&gt;

&lt;p&gt;我们怀疑，现有系统泛化能力不足的主要原因在于，人们普遍在单一领域的数据集上进行单任务训练。要使用当前架构实现健壮的系统，很可能需要在各种领域和任务上进行训练和性能评估。最近，已经提出了一些基准测试，如GLUE（Wang等人，2018）和decaNLP（McCann等人，2018），以便开始研究这一问题。&lt;/p&gt;

&lt;p&gt;多任务学习（Caruana，1997）是一个有前景的框架，可以用来提高整体性能。然而，在自然语言处理领域，多任务训练仍然处于初级阶段。最近的研究报告显示，性能改进有限（Yogatama等人，2019），迄今为止最具野心的两项研究分别在10个和17个「（数据集，目标）对」上进行了训练（McCann等人，2018）（Bowman等人，2018）。从元学习的角度看，每个「（数据集，目标）对」都是从数据集和目标的分布中抽样出来的单个训练样本。当前的机器学习系统需要数百到数千个样本才能形成具有良好泛化能力的函数。这表明，多任务训练可能需要与当前方法相同数量的有效训练对，以实现其潜在的优势。要继续扩大数据集的创建和目标设计的规模，可能需要使用当前技术付出巨大努力。这促使我们探索进行多任务学习的其他设置。&lt;/p&gt;

&lt;p&gt;目前在语言任务上表现最佳的系统采用了预训练和有监督微调相结合的方法。这种方法有着悠久的历史，逐渐朝着更灵活的迁移形式发展。起初，研究者学习词向量并将其作为特定任务架构的输入（Mikolov等人，2013年）（Collobert等人，2011年），接着迁移到循环网络的上下文表示（Dai &amp;amp; Le，2015年）（Peters等人，2018年）。近期的研究表明，不再需要特定任务的架构，迁移多个自注意力模块就足够了（Radford等人，2018年）（Devlin等人，2018年）。&lt;/p&gt;

&lt;p&gt;尽管如此，这些方法仍然需要有监督训练来完成任务。当只有极少量或没有监督数据时，另一方面的研究表明语言模型在执行特定任务方面具有潜力，例如常识推理（Schwartz等人，2017年）和情感分析（Radford等人，2017年）。&lt;/p&gt;

&lt;p&gt;在本文中，我们将这两个研究方向联系起来，继续朝更通用的迁移方法发展。我们证明语言模型在零样本设置下可以执行下游任务，无需任何参数或架构的修改。我们通过强调语言模型在零样本环境下执行各种任务的能力，展示了这种方法的潜力。依据不同的任务，我们取得了具有前景、竞争力和最先进水平的成果。&lt;/p&gt;

&lt;h2 id=&quot;6-讨论&quot;&gt;6. 讨论&lt;/h2&gt;

&lt;p&gt;许多研究致力于学习（Hill等人，2016）、理解（Levy &amp;amp; Goldberg，2014）以及严格评估（Wieting &amp;amp; Kiela，2019）有监督和无监督预训练方法的表征。我们的研究结果表明，无监督任务学习是一个值得进一步探讨的有前景的研究方向。这些发现或许有助于解释预训练技术在下游NLP任务中为何取得广泛成功，因为我们证明，在某种程度上，这些预训练技术中的其中一种已经开始直接学习执行任务，而不需要监督适应或修改。&lt;/p&gt;

&lt;p&gt;在阅读理解方面，GPT-2在零样本环境中的表现与有监督的基准相当。然而，在其他任务如摘要方面，尽管从质量上看GPT-2已经执行了这个任务，但从定量指标来看，其表现仍然处于初级阶段。虽然这一研究结果具有启示性，但从实际应用角度来看，GPT-2的零样本性能仍然远远无法满足实际需求。&lt;/p&gt;

&lt;p&gt;我们已经研究了WebText语言模型在许多典型NLP任务上的零样本性能，然而仍有许多其他任务值得评估。无疑，有很多实际任务中，GPT-2的性能仍然不比随机选择优秀。甚至在我们评估过的常见任务中，如问答和翻译，只有当语言模型具备足够的容量时，它们才能开始超过简单的基线。&lt;/p&gt;

&lt;p&gt;尽管零样本性能在许多任务上为GPT-2的潜在表现建立了基准，但在微调之后的上限并不明确。在一些任务中，GPT-2的完全生成式输出与当前在许多问答和阅读理解数据集上表现卓越的基于抽取式指针网络（Vinyals等人，2015）的输出有显著差异。考虑到GPT在微调方面的过往成功，我们计划探讨在decaNLP和GLUE等基准上的微调，特别是，目前尚不明确GPT-2额外的训练数据和容量是否足以克服BERT（Devlin等人，2018年）中提到的单向表示的低效问题。&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;当一个大型语言模型在一个足够庞大且多样的数据集上进行训练时，它能在众多领域和数据集中表现出色。GPT-2在8个经过测试的语言建模数据集中的7个上实现了零样本的顶尖性能。模型在零样本设置下能够完成的任务类型之多样，暗示着通过训练高容量模型来最大化足够多样化的文本语料库的似然性，开始学会执行大量令人惊叹的任务，而无需显式监督。&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Apr 2023 22:48:00 +0800</pubDate>
        <link>http://wulfric.me/2023/04/gpt2-ch/</link>
        <guid isPermaLink="true">http://wulfric.me/2023/04/gpt2-ch/</guid>
        
        <category>ai</category>
        
        <category>chatgpt</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title>GPT1 论文翻译：Improving Language Understanding by Generative Pre-Training</title>
        <description>&lt;p&gt;通过生成式预训练提高语言模型的理解能力。&lt;/p&gt;

&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;

&lt;p&gt;「自然语言理解」包括了文本蕴涵、问答、语义相似性评估和文档分类等多种不同的任务。尽管大型无标注文本语料库是很丰富的，但用于学习这些特定任务的标注数据却比较稀缺，这使得以判别方式训练的模型难以表现良好。我们证明，在多样化的无标注文本语料库上对语言模型进行「生成式预训练」（即 GPT），然后对每个特定任务进行「判别式微调」，可以在这些任务上实现大幅能力提升。与以前的方法不同，我们在微调过程中使用任务感知输入变换，在不需要对模型架构进行大量更改的情况下实现有效的迁移。我们在一系列自然语言理解基准任务上展示了我们方法的有效性。我们的通用任务不可知模型优于使用专门为每个任务定制的架构的判别式训练模型，在12个研究任务中有9个任务上显著改善了最先进水平。例如，我们在常识推理（Stories Cloze Test）上实现了8.9%的绝对提升，在问答（RACE）上实现了5.7%的提升，在文本蕴涵（MultiNLI）上实现了1.5%的提升。&lt;/p&gt;

&lt;h2 id=&quot;1-导言&quot;&gt;1. 导言&lt;/h2&gt;

&lt;p&gt;学会有效地从原始文本中学习对于减轻自然语言处理（NLP）中对监督学习的依赖至关重要。大多数深度学习方法需要大量手动标注的数据，这限制了它们在许多缺乏注释资源的领域中的适用性[61]。在这些情况下，能够利用未标注数据中的语言信息的模型提供了一种收集更多注释的有价值的替代方案，而收集这些注释可能是耗时且昂贵的。此外，即使在监督较多（considerable supervision）的情况下，以无监督的方式学习良好的表示（good representations）也可以带来显著的性能提升。迄今为止最引人注目的证据是广泛使用预训练词嵌入[10, 39, 42]来提高一系列NLP任务性能[8, 11, 26, 45]。&lt;/p&gt;

&lt;p&gt;然而，从未标注文本中提取比词级信息（word-level information）更多的信息具有挑战性。原因有两个：首先，不清楚哪种类型的优化目标（optimization objectives）在学习对于迁移有用的文本表示&lt;sup id=&quot;fnref:tr&quot;&gt;&lt;a href=&quot;#fn:tr&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;（text representations）方面最有效。近期研究已经考察了各种目标，如语言建模[44]、机器翻译[38]和话语连贯性[22]，在不同任务上，每种方法的表现也不同（在A任务上方法1优于方法2；在B任务上可能相反）。其次，关于如何最有效地将这些学到的表示迁移到目标任务上，尚无共识。现有技术涉及对模型架构进行针对特定任务的更改[43, 44]、使用复杂的学习方案[21]以及添加辅助学习目标[50]。这些不确定性使得开发用于语言处理的有效半监督学习方法变得困难。&lt;/p&gt;

&lt;p&gt;在本文中，我们探讨了一种使用无监督预训练和监督微调相结合的半监督方法来进行语言理解任务。我们的目标是学习一种通用表示，可以在很少的调整下适应各种任务。我们假设有大量未标记文本的语料库和几个带有手动注释训练示例的数据集（目标任务）。我们的设置不要求这些目标任务与未标记语料库在同一领域。我们采用两阶段训练过程。首先，我们在未标记数据上使用语言建模目标来学习神经网络模型的初始参数。随后，我们使用相应的监督目标将这些参数调整以适应目标任务。&lt;/p&gt;

&lt;p&gt;对于我们的模型架构，我们采用了Transformer 模型[62]，它已被证明在各种任务上表现出色，如机器翻译[62]、文档生成[34]和句法解析[29]。与循环网络等替代方案相比，选择的这种模型为我们提供了一个更加结构化的记忆，用于处理文本中的长距离依赖关系，从而在各种不同任务中实现了稳健的迁移性能。在迁移过程中，我们利用遍历式方法[52]，针对特定任务对输入进行调整，该方法将结构化文本输入作为一个连续的 token 序列进行处理。正如我们在实验中所展示的，这些调整使我们能够在对预训练模型的架构进行最小改动的情况下进行有效的微调&lt;sup id=&quot;fnref:tna&quot;&gt;&lt;a href=&quot;#fn:tna&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;我们在四种类型的语言理解任务上评估我们的方法，包括自然语言推理、问题回答、语义相似性和文本分类。我们的通用任务无关模型胜过了采用针对每个任务专门设计的架构的判别式训练模型&lt;sup id=&quot;fnref:dtm&quot;&gt;&lt;a href=&quot;#fn:dtm&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;，在研究的12个任务中有9个任务显著提高了技术水平。例如，我们在常识推理（Stories Cloze Test）[40]上实现了8.9%的绝对改进，在问题回答（RACE）[30]上实现了5.7%的改进，在文本蕴含（MultiNLI）[66]上实现了1.5%的改进，以及在最近引入的GLUE多任务基准[64]上实现了5.5%的改进。我们还分析了预训练模型在四种不同设置下的零样本行为，并证明它获取了对下游任务有用的语言知识。&lt;/p&gt;

&lt;h2 id=&quot;2-相关工作&quot;&gt;2. 相关工作&lt;/h2&gt;
&lt;p&gt;NLP 的半监督学习：我们的工作大致属于自然语言半监督学习的范畴。这一范式引起了广泛关注，应用于诸如序列标记[24, 33, 57]或文本分类[41, 70]等任务。最早的方法使用未标注数据计算单词级或短语级统计信息，然后将其用作监督模型中的特征[33]。在过去的几年里，研究人员已经证明了使用词嵌入[11, 39, 42]的好处，这些词嵌入在未标注的语料库上进行训练，以提高各种任务的性能[8, 11, 26, 45]。然而，这些方法主要迁移单词级信息，而我们的目标是捕捉更高级别的语义。&lt;/p&gt;

&lt;p&gt;最近的方法研究了从未标注数据中学习和利用超过单词级语义的方法。可以使用未标注语料库训练的短语级或句子级嵌入已被用于将文本编码为适合各种目标任务的向量表示[28, 32, 1, 36, 22, 12, 56, 31]。&lt;/p&gt;

&lt;p&gt;无监督预训练：无监督预训练是半监督学习的一个特例，其目标是寻找一个好的初始化点，而不是修改监督学习目标。早期的工作探讨了这种技术在图像分类[20, 49, 63]和回归任务[3]中的应用。随后的研究[15]表明，预训练作为一种正则化方案，能够在深度神经网络中实现更好的泛化。在最近的工作中，该方法已经被用于帮助训练各种任务的深度神经网络，如图像分类[69]、语音识别[68]、实体消歧[17]和机器翻译[48]。&lt;/p&gt;

&lt;p&gt;与我们的工作最接近的一条研究路线是使用语言建模目标预训练神经网络，然后在有监督的目标任务上对其进行微调。Dai等人[13]和Howard和Ruder[21]遵循这种方法来改进文本分类。然而，尽管预训练阶段有助于捕捉一些语言信息，但他们使用LSTM模型，这一模型将其预测能力限制在一个比较小的范围内。相反，我们选择的 transformer 网络允许我们捕捉更长的语言结构，如我们的实验中所示。此外，我们还展示了我们的模型在更广泛的任务范围内的有效性，包括自然语言推理、释义检测和故事补全。其他方法[43, 44, 38]在训练目标任务的监督模型时，使用预训练语言或机器翻译模型的隐藏表示（hidden representations）作为辅助特征。这涉及到为每个独立的目标任务引入大量新的参数，而在迁移过程中，我们对模型架构的改变最小。&lt;/p&gt;

&lt;p&gt;辅助训练目标：添加辅助无监督训练目标是半监督学习的另一种形式。Collobert和Weston[10]的早期工作使用了各种辅助NLP任务，如词性标注、分块、命名实体识别和语言建模来改进语义角色标注。最近，Rei[50]在他们的目标任务目标中添加了辅助语言建模目标，并在序列标注任务上获得了性能提升。我们的实验也使用辅助目标，但如我们所示，无监督预训练已经学会了与目标任务相关的多种语言方面。&lt;/p&gt;

&lt;h2 id=&quot;3-框架&quot;&gt;3. 框架&lt;/h2&gt;
&lt;p&gt;我们的训练过程包含2个阶段。第一阶段是在大型文本语料上学习高容量的语言模型。接下来是微调阶段。在这个阶段，我们借助标注数据，调整模型以适应一个判别任务。&lt;/p&gt;

&lt;p&gt;无监督预训练：给定一个无监督的token语料库$U = {u_1, . . . , u_n}$，我们使用标准的语言建模目标来最大化以下似然：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;L_1(U) = \Sigma_ilogP(u_i|u_{i−k},...,u_{i−1};\Theta)&lt;/script&gt;

&lt;p&gt;其中k是上下文窗口的大小，条件概率P使用具有参数$\Theta$的神经网络进行建模。这些参数使用随机梯度下降[51]进行训练。&lt;/p&gt;

&lt;p&gt;在我们的实验中，我们使用多层Transformer decoder [34]作为语言模型，这是Transformer[62]的一个变种。该模型在输入上下文token上应用多头自注意力操作，然后通过逐位置前馈层来产生目标 token 上的输出分布：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned} &amp;h_0 = UW_e + W_p \\ &amp;h_l = transformer\_block(h_{l−1})\forall_i \in [1, n] \\  &amp;P(u) = softmax(h_n W_e^T ) \end{aligned} %]]&gt;&lt;/script&gt;

&lt;p&gt;其中$U = (u_{−k}, . . . , u_{−1})$是 token的上下文向量，n是层数，$W_e$是token嵌入矩阵，$W_p$是位置嵌入矩阵。l 是神经网络的层数。&lt;/p&gt;

&lt;p&gt;在使用等式1中的目标训练模型之后，我们将参数调整以适应有监督目标任务。我们假设一个带标签的数据集$C$，其中每个实例包括一系列输入 token $x^1, . . . , x^m$，以及一个标签y。该输入数据传输通过我们的预训练模型，以获得最终的Transformer block的激活器$h^m_l$ ，然后将其输入到新添加的线性输出层（参数为$W_y$）中以预测y：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(y|x^1,...,x^m) = softmax(h^m_l W_y)&lt;/script&gt;

&lt;p&gt;这给我们提供了最大化的目标：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;L_2(C) = \Sigma_{(x,y)} logP(y|x^1,...,x^m)&lt;/script&gt;

&lt;p&gt;我们还发现，在微调过程中将语言建模作为辅助目标有助于学习，原因是：（a）改善监督模型的泛化能力；（b）加速收敛。这与之前的工作[50, 43]一致，他们也观察到了使用这样一个辅助目标可以提高性能。具体来说，我们优化以下目标（权重λ）：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;L_3(C) = L_2(C) + \lambda * L_1(C)&lt;/script&gt;

&lt;p&gt;总的来说，在微调过程中，我们仅需要额外的参数$W_y$以及分隔符token的嵌入（在第3.3节中描述）。&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;
          &lt;picture&gt;
            
            
            &lt;img src=&quot;http://static.wulfric.me/chatgpt/gpt1.jpg&quot; alt=&quot;图1: (左侧) 这项工作中用到的 transformer  结构和训练目标。（右侧）微调阶段，在不同任务上的输入变换。我们将所有结构化的输出转换成可以被我们的预训练模型处理的token序列，然后在最后添加一层线性+softmax层&quot; width= height= /&gt;
          &lt;/picture&gt;
          &lt;figcaption&gt;&lt;i class='icon-pencil'&gt;&lt;/i&gt;图1: (左侧) 这项工作中用到的 transformer  结构和训练目标。（右侧）微调阶段，在不同任务上的输入变换。我们将所有结构化的输出转换成可以被我们的预训练模型处理的token序列，然后在最后添加一层线性+softmax层&lt;/figcaption&gt;
        &lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;对于某些任务，如文本分类，我们可以直接按照上述方法微调我们的模型。某些其他任务，如问题回答或文本蕴含，具有结构化输入，如有序句子对或文档、问题和答案的三元组。由于我们的预训练模型是在连续文本序列上进行训练的，因此我们需要对其进行一些修改才能将其应用于这些任务。之前的工作提出了在转移表示之上学习特定任务的架构[44]。这种方法重新引入了大量任务特定的定制，并且没有为这些额外的架构组件使用迁移学习。相反，我们使用遍历式方法[52]，将结构化输入转换为我们的预训练模型可以处理的有序序列。这些输入转换使我们能够避免在任务之间对架构进行大量更改。我们在下面简要描述了这些输入转换，图1提供了一个视觉示例。所有转换都包括添加随机初始化的开始和结束标记（⟨s⟩, ⟨e⟩）。&lt;/p&gt;

&lt;p&gt;文本蕴含：对于蕴含任务，我们将前提p和假设h的令牌序列连接在一起，中间用分隔符标记($)隔开。&lt;/p&gt;

&lt;p&gt;相似性：对于相似性任务，比较的两个句子之间没有固有的顺序。为了反映这一点，我们修改输入序列以包含两种可能的句子顺序（中间有分隔符），并分别处理它们以生成两个序列表示 $h^m_l$，这些表示在输入到线性输出层之前按元素相加。&lt;/p&gt;

&lt;p&gt;问题回答和常识推理：对于这些任务，我们给定一个上下文文档z，一个问题q和一组可能的答案${a_k}$。我们将文档上下文和问题与每个可能的答案连接在一起，在中间添加一个分隔符标记，得到$[z;q;$;a_k]$。使用我们的模型独立处理这些序列，然后通过softmax层进行归一化，以生成可能答案的分布。&lt;/p&gt;

&lt;h2 id=&quot;4-试验&quot;&gt;4. 试验&lt;/h2&gt;

&lt;h3 id=&quot;41-设置&quot;&gt;4.1 设置&lt;/h3&gt;

&lt;p&gt;无监督预训练：我们使用BooksCorpus数据集[71]来训练语言模型。该数据集包含超过7,000本不同的未发表书籍，涵盖了冒险、奇幻和浪漫等多种类型。关键在于，它包含了长篇连续的文本，这使得生成模型能够学会根据长距离的上下文信息进行条件化建模。另一个可替代的数据集是1B Word Benchmark，它被类似的方法ELMo[44]所使用，虽然数据集规模大致相同，但在句子层面进行了打乱处理，从而破坏了长距离的结构。在这个语料库上，我们的语言模型取得了非常低的token级别困惑度，达到了18.4。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Task&lt;/th&gt;
      &lt;th&gt;Datasets&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Natural language inference&lt;/td&gt;
      &lt;td&gt;SNLI [5], MultiNLI [66], Question NLI [64], RTE [4], SciTail [25]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Question Answering&lt;/td&gt;
      &lt;td&gt;RACE [30], Story Cloze [40]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Sentence similarity&lt;/td&gt;
      &lt;td&gt;MSR Paraphrase Corpus [14], Quora Question Pairs [9], STS Benchmark [6]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Classification&lt;/td&gt;
      &lt;td&gt;Stanford Sentiment Treebank-2 [54], CoLA [65]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;表1: 本次试验中用到的任务和数据集&lt;/p&gt;

&lt;p&gt;模型规格：我们的模型主要依据原始Transformer架构[62]。我们训练了一个12层的 decoder-only Transformer，具有遮蔽式自注意力机制（768维状态和12个注意力头）。对于逐位置前馈网络，我们使用了3072维的内部状态。我们使用了Adam优化方案[27]，最大学习率为2.5e-4。学习率在前2000次更新中从零线性增加，然后使用余弦调度退火至0。我们在64个随机抽样的连续序列（每个序列包含512个标记）上进行100个周期的小批量训练。由于LayerNorm[2]在整个模型中被广泛使用，简单的权重初始化N(0,0.02)就足够了。我们使用了包含40,000次合并[53]的字节对编码（BPE）词汇表，以及具有0.1正则化率的残差、嵌入和注意力dropout。我们还采用了[37]中提出的一种修改版的L2正则化，对所有非偏置或增益权重w=0.01。对于激活函数，我们使用高斯误差线性单元（GELU）[18]。我们使用学习位置嵌入替代了原始工作中提出的正弦版本。我们使用ftfy库来清理BooksCorpus中的原始文本，标准化一些标点符号和空白，并使用spaCy分词器。&lt;/p&gt;

&lt;p&gt;微调细节：除非特别指定，我们会沿用无监督预训练的超参数设置。我们在分类器中添加0.1的dropout率。对于大多数任务，我们采用6.25e-5的学习率和32的批次大小。我们的模型能够快速进行微调，在大多数情况下，训练3个周期就足够了。我们采用线性学习率衰减调度策略，训练的前0.2%阶段进行预热。λ设置为0.5。&lt;/p&gt;

&lt;h3 id=&quot;42-有监督微调&quot;&gt;4.2 有监督微调&lt;/h3&gt;

&lt;p&gt;我们在多种有监督任务上进行实验，包括自然语言推理、问答、语义相似度和文本分类。其中一些任务包含在近期发布的 GLUE 多任务基准测试[64]中，我们也对其进行了使用。图 1 对所有任务和数据集进行了概述。&lt;/p&gt;

&lt;p&gt;自然语言推理（NLI）任务，也称为识别文本蕴涵，涉及阅读一对句子并从蕴涵、矛盾或中立关系中判断它们之间的关系。尽管最近已经引起了很多关注[58, 35, 44]，但由于存在多种现象，如词汇蕴涵、共指、词汇和句法歧义等，这个任务仍然具有挑战性。我们在五个数据集上进行评估，这些数据集来源丰富，包括图像标题（SNLI）、转录语音、通俗小说和政府报告（MNLI）、维基百科文章（QNLI）、科学考试（SciTail）或新闻文章（RTE）。&lt;/p&gt;

&lt;p&gt;表2详细展示了我们的模型在不同NLI任务中与之前最先进方法的各种对比结果。在五个数据集中的四个上，我们的方法明显优于基准线，相较于之前的最佳结果，在MNLI上绝对提升达到1.5%，在SciTail上绝对提升达到5%，在QNLI上绝对提升达到5.8%，在SNLI上绝对提升达到0.6%。这证明了我们的模型在处理多句子推理和应对语言歧义方面的优势。在RTE（一个较小的数据集，包含2490个示例）上，我们取得了56%的准确率，低于多任务双向LSTM模型报告的61.7%。鉴于我们的方法在更大的NLI数据集上的强大性能，很可能我们的模型也将从多任务训练中受益，但我们目前尚未探讨这一点。&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;
          &lt;picture&gt;
            
            
            &lt;img src=&quot;http://static.wulfric.me/chatgpt/GPT1-table2.jpg&quot; alt=&quot;表2：自然语言推理任务的实验结果，将我们的模型与当前最先进的方法进行比较。5x表示5个模型的集成。所有数据集都使用准确率作为评估指标&quot; width= height= /&gt;
          &lt;/picture&gt;
          &lt;figcaption&gt;&lt;i class='icon-pencil'&gt;&lt;/i&gt;表2：自然语言推理任务的实验结果，将我们的模型与当前最先进的方法进行比较。5x表示5个模型的集成。所有数据集都使用准确率作为评估指标&lt;/figcaption&gt;
        &lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;问题回答和常识推理：另一个涉及单句和多句推理的任务是问答。我们采用了最近发布的RACE数据集[30]，该数据集包含了来自初中和高中考试的英文段落及相关问题。与CNN [19] 或SQuaD [47]等其他数据集相比，这个语料库包含了更多的推理类型问题，为我们的模型提供了极佳的评估，因为我们的模型经过训练能够处理长距离的上下文。此外，我们还评估了Story Cloze Test[40]，这个测试要求从两个选项中为多句故事选择正确的结尾。在这些任务上，我们的模型再次明显优于先前的最佳结果——在Story Cloze上最高提高了8.9%，在RACE上整体提高了5.7%。这证明了我们的模型在有效处理长距离上下文方面具有很强的能力。&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;
          &lt;picture&gt;
            
            
            &lt;img src=&quot;http://static.wulfric.me/chatgpt/GPT1-table3.jpg&quot; alt=&quot;表3：在问答和常识推理方面的结果，将我们的模型与当前最先进的方法进行比较。9x表示9个模型的集成&quot; width= height= /&gt;
          &lt;/picture&gt;
          &lt;figcaption&gt;&lt;i class='icon-pencil'&gt;&lt;/i&gt;表3：在问答和常识推理方面的结果，将我们的模型与当前最先进的方法进行比较。9x表示9个模型的集成&lt;/figcaption&gt;
        &lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;语义相似度：语义相似度（或释义检测）任务包括预测两个句子在语义上是否等价。挑战在于识别概念的重新表述，理解否定语句以及处理句法歧义。我们在这个任务中使用了三个数据集——Microsoft Paraphrase语料库（MRPC）[14]（来源于新闻报道），Quora问题对（QQP）数据集[9]，以及语义文本相似度基准（STS-B）[6]。我们在三个语义相似度任务的两个任务中取得了最佳成绩（表4），在STS-B上的绝对增益达到1分。在QQP上的性能差距显著，与单任务BiLSTM + ELMo + Attn相比，绝对提高了4.2%。&lt;/p&gt;

&lt;p&gt;最后，我们在两个不同的文本分类任务上进行评估。语言可接受性语料库（CoLA）[65] 包含了关于句子是否符合语法规则的专家评判，用以测试训练模型的固有语言偏差。另一方面，斯坦福情感树库（SST-2）[54] 是一个标准的二分类任务。我们的模型在CoLA上获得了45.4分，这比先前最好的结果35.0有显著提高，展示了我们模型所学到的固有语言偏差。在SST-2上，模型也取得了91.3%的准确率，与最佳结果相当。我们在GLUE基准测试上也获得了72.8的总分，明显优于先前最好的68.9。&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;
          &lt;picture&gt;
            
            
            &lt;img src=&quot;http://static.wulfric.me/chatgpt/GPT1-table4.jpg&quot; alt=&quot;表4：语义相似性和分类结果，将我们的模型与当前最先进的方法进行比较。本表中所有任务评估均使用GLUE基准测试进行。（mc= Mathews相关系数，acc=准确率，pc=Pearson相关系数）&quot; width= height= /&gt;
          &lt;/picture&gt;
          &lt;figcaption&gt;&lt;i class='icon-pencil'&gt;&lt;/i&gt;表4：语义相似性和分类结果，将我们的模型与当前最先进的方法进行比较。本表中所有任务评估均使用GLUE基准测试进行。（mc= Mathews相关系数，acc=准确率，pc=Pearson相关系数）&lt;/figcaption&gt;
        &lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;总体来说，我们的方法在12个评估数据集中的9个上取得了新的最佳成绩，很多情况下超过了集成模型。我们的结果还表明，我们的方法在不同规模的数据集上都表现良好，从较小的数据集如STS-B（约5.7k训练样本）到最大的数据集SNLI（约550k训练样本）。&lt;/p&gt;

&lt;h2 id=&quot;5-分析&quot;&gt;5. 分析&lt;/h2&gt;

&lt;p&gt;迁移层数的影响：我们观察了从无监督预训练向有监督目标任务迁移不同数量层数的影响。图2（左）描绘了我们在MultiNLI和RACE上的方法性能，作为迁移层数量的函数。我们观察到标准结果，即迁移嵌入可以提高性能，每个Transformer层都能进一步带来好处，对于MultiNLI的完全转移，可以提高9%。这表明预训练模型中的每一层都包含解决目标任务的有用功能。&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;
          &lt;picture&gt;
            
            
            &lt;img src=&quot;http://static.wulfric.me/chatgpt/gpt1-2.jpg&quot; alt=&quot;图2：（左）将从预训练语言模型迁移的层数逐渐增加对RACE和MultiNLI的影响。（右）图表显示了LM预训练更新作为函数的不同任务零样本性能的演变。任务性能在随机猜测基线和使用单一模型的当前最先进技术之间归一化&quot; width= height= /&gt;
          &lt;/picture&gt;
          &lt;figcaption&gt;&lt;i class='icon-pencil'&gt;&lt;/i&gt;图2：（左）将从预训练语言模型迁移的层数逐渐增加对RACE和MultiNLI的影响。（右）图表显示了LM预训练更新作为函数的不同任务零样本性能的演变。任务性能在随机猜测基线和使用单一模型的当前最先进技术之间归一化&lt;/figcaption&gt;
        &lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;零样本表现：我们希望更好地了解为什么对Transformer进行语言模型预训练是有效的。一个假设是底层生成模型为了提高其语言建模能力，学会了我们用于评估的许多任务，而Transformer相比LSTM的更结构化的注意力记忆有助于更好地迁移。我们设计了一系列启发式解决方案，使用底层生成模型在无监督微调的情况下执行任务。我们在图2（右）中显示了在生成预训练过程中这些启发式解决方案的有效性。我们观察到这些启发式方法的性能在训练过程中稳定且稳步提高，表明生成预训练支持学习各种与任务相关的功能。我们还观察到LSTM在零样本性能方面波动较大，表明Transformer架构的归纳偏差有助于迁移。&lt;/p&gt;

&lt;p&gt;对于CoLA（语言可接受性），将示例按照生成模型分配的平均token对数概率进行评分，并通过阈值进行预测。对于SST-2（情感分析），我们将very 这个token添加到每个示例后面，并将语言模型的输出分布仅限于单词positive和negative，认定被分配到的更高概率的token作为预测结果。对于RACE（问答），我们选择在给定文档和问题的条件下，生成模型分配的具有最高平均token对数概率的答案。对于DPRD [46]（Winograd模式），我们用两个可能的指代物替换定指代词（确定的指代词），并预测生成模型在替换后的序列其余部分分配较高平均token对数概率的解析。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Method&lt;/th&gt;
      &lt;th&gt;Avg. Score&lt;/th&gt;
      &lt;th&gt;CoLA (mc)&lt;/th&gt;
      &lt;th&gt;SST2(acc)&lt;/th&gt;
      &lt;th&gt;MRPC(F1)&lt;/th&gt;
      &lt;th&gt;STSB(pc)&lt;/th&gt;
      &lt;th&gt;QQP(F1)&lt;/th&gt;
      &lt;th&gt;MNLI(acc)&lt;/th&gt;
      &lt;th&gt;QNLI(acc)&lt;/th&gt;
      &lt;th&gt;RTE(acc)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Transformer w/ aux LM (full)&lt;/td&gt;
      &lt;td&gt;74.7&lt;/td&gt;
      &lt;td&gt;45.4&lt;/td&gt;
      &lt;td&gt;91.3&lt;/td&gt;
      &lt;td&gt;82.3&lt;/td&gt;
      &lt;td&gt;82.0&lt;/td&gt;
      &lt;td&gt;70.3&lt;/td&gt;
      &lt;td&gt;81.8&lt;/td&gt;
      &lt;td&gt;88.1&lt;/td&gt;
      &lt;td&gt;56.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Transformer w/o pre-training&lt;/td&gt;
      &lt;td&gt;59.9&lt;/td&gt;
      &lt;td&gt;18.9&lt;/td&gt;
      &lt;td&gt;84.0&lt;/td&gt;
      &lt;td&gt;79.4&lt;/td&gt;
      &lt;td&gt;30.9&lt;/td&gt;
      &lt;td&gt;65.5&lt;/td&gt;
      &lt;td&gt;75.7&lt;/td&gt;
      &lt;td&gt;71.2&lt;/td&gt;
      &lt;td&gt;53.8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Transformer w/o aux LM&lt;/td&gt;
      &lt;td&gt;75.0&lt;/td&gt;
      &lt;td&gt;47.9&lt;/td&gt;
      &lt;td&gt;92.0&lt;/td&gt;
      &lt;td&gt;84.9&lt;/td&gt;
      &lt;td&gt;83.2&lt;/td&gt;
      &lt;td&gt;69.8&lt;/td&gt;
      &lt;td&gt;81.1&lt;/td&gt;
      &lt;td&gt;86.9&lt;/td&gt;
      &lt;td&gt;54.4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LSTM w/ aux LM&lt;/td&gt;
      &lt;td&gt;69.1&lt;/td&gt;
      &lt;td&gt;30.3&lt;/td&gt;
      &lt;td&gt;90.5&lt;/td&gt;
      &lt;td&gt;83.2&lt;/td&gt;
      &lt;td&gt;71.8&lt;/td&gt;
      &lt;td&gt;68.1&lt;/td&gt;
      &lt;td&gt;73.7&lt;/td&gt;
      &lt;td&gt;81.1&lt;/td&gt;
      &lt;td&gt;54.6&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;消融研究：我们进行了三种不同的消融研究（表5）。首先，我们在微调过程中检查没有辅助LM目标的方法性能。我们观察到，辅助目标在NLI任务和QQP上有所帮助。总体趋势表明，较大的数据集从辅助目标中受益，而较小的数据集则没有。其次，我们通过将Transformer与使用相同框架的单层2048单元LSTM进行比较，分析了Transformer的效果。我们观察到，在使用LSTM代替Transformer时，平均分数下降了5.6分。LSTM仅在一个数据集上胜过Transformer —— MRPC。最后，我们还将直接在监督目标任务上训练的Transformer架构与没有预训练的情况进行比较。我们观察到，缺乏预训练会影响所有任务的性能，与我们的完整模型相比，下降了14.8%。&lt;/p&gt;

&lt;h2 id=&quot;6-结论&quot;&gt;6. 结论&lt;/h2&gt;

&lt;p&gt;我们提出了一个框架，通过生成式预训练和判别式微调，让单一的任务无关模型具备强大的自然语言理解能力。通过在包含长篇连续文本的多样化语料库上进行预训练，我们的模型学会了丰富的世界知识和处理长距离依赖关系的能力。然后，将这些知识和能力成功地应用于解决判别性任务，例如问答、语义相似度评估、蕴含关系判断和文本分类，从而在我们研究的12个数据集中，提高了其中9个的最高技术水平。在机器学习研究中，利用无监督（预）训练来提高判别任务性能一直是一个重要的目标。我们的工作表明，确实可以实现显著的性能提升，并为哪些模型（如Transformer）和数据集（具有长距离依赖关系的文本）最适合这种方法提供了参考。我们希望这将有助于推动新的无监督学习研究，无论是在自然语言理解还是其他领域，进一步提高我们对无监督学习如何以及何时发挥作用的理解。&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:tr&quot;&gt;
      &lt;p&gt;在自然语言处理（NLP）中，text representations（文本表示）是将文本转换为计算机可以处理的形式的过程。文本表示是NLP中的一个重要问题，因为计算机无法直接处理自然语言。因此，研究人员需要将文本转换为计算机可以理解的形式，以便进行下一步的处理，如分类、聚类、信息检索等。文本表示的目标是将文本转换为向量或矩阵的形式，使得计算机可以对其进行数学运算和统计分析。常用的文本表示方法包括以下几种：1) One-hot representation（独热表示）：将每个单词表示为一个向量，其中只有一个元素是1，其余元素均为0。该方法不考虑单词之间的语义和上下文信息，因此效果有限。2) Bag-of-words representation（词袋表示）：将文本表示为一个单词的集合，并统计每个单词出现的次数。该方法考虑了单词的出现频率，但忽略了单词之间的顺序和语义信息。3) Word embedding（词嵌入）：将每个单词表示为一个低维向量，使得单词之间的距离反映了它们之间的语义关系。Word embedding通常使用神经网络模型进行训练，例如Word2Vec和GloVe等。4) Transformer-based representation（基于Transformer的表示）：最近的文本表示方法中，基于Transformer的表示方法已经成为主流。Transformer是一种使用自注意力机制的神经网络，可以将文本转换为一系列向量，每个向量代表一个单词或短语的语义信息。BERT、GPT等是基于Transformer的表示方法的代表。 &lt;a href=&quot;#fnref:tr&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:tna&quot;&gt;
      &lt;p&gt;fine-tune 翻译成微调；adaption 翻译成调整，有些翻译成适应性、适应，个人感觉在这里是调整的意思。后文也提到了，对于特定的任务，会把输入的词句做一些简单的调整（比如添加分隔符等）。 &lt;a href=&quot;#fnref:tna&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:dtm&quot;&gt;
      &lt;table&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;在机器学习中，discriminatively trained model（判别式训练模型）是一种常见的模型训练方法。该方法的主要目标是学习一个函数，该函数可以将输入数据映射到其相应的输出。与生成式模型不同，判别式模型不是直接建模联合分布 P(X,Y)，而是直接建模条件分布 $P(Y&lt;/td&gt;
            &lt;td&gt;X)$，也就是在给定输入 X 的情况下预测输出 Y。判别式模型通常使用梯度下降等优化方法进行训练，优化目标是最大化对数据集的条件对数似然估计，或最小化分类误差等评价指标。在训练过程中，模型根据输入数据和其正确的标签来调整模型的权重和偏差，以便更准确地预测输出。相对于生成式模型，判别式模型在许多实际应用中具有更好的性能，特别是在分类、标注、聚类等任务中。因为判别式模型直接建模了输入和输出之间的映射关系，可以更好地适应不同的输入分布和输出分布。判别式模型还具有更快的训练速度和更高的泛化能力，这使得它们成为机器学习领域的重要工具之一。需要注意的是，判别式模型的性能取决于训练数据的质量和多样性，以及模型的选择和参数调整。因此，在应用判别式模型时，需要仔细选择训练数据和模型参数，以获得最佳的性能。&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;p&gt;&lt;a href=&quot;#fnref:dtm&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 05 Apr 2023 23:32:00 +0800</pubDate>
        <link>http://wulfric.me/2023/04/gpt1-ch/</link>
        <guid isPermaLink="true">http://wulfric.me/2023/04/gpt1-ch/</guid>
        
        <category>ai</category>
        
        <category>chatgpt</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title>JAVA 11 MAC 源码安装与调试</title>
        <description>&lt;p&gt;JAVA 11 是 JAVA 8 之后的第一个 LTS 版本，为了了解下一代 JAVA 版本更新的内容，也为了能调试到 JAVA 的内部代码，所以笔者决定源码安装试试。&lt;/p&gt;

&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;

&lt;p&gt;官方给出的安装教程&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;是这样的：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;下载源码：&lt;span class=&quot;codespan&quot;&gt;hg clone http://hg.openjdk.java.net/jdk/jdk&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;执行configure：&lt;span class=&quot;codespan&quot;&gt;bash configure&lt;/span&gt;。缺失依赖会导致 configure 失败，但错误日志都会给出操作建议，根据建议安装依赖即可&lt;/li&gt;
  &lt;li&gt;执行 make：&lt;span class=&quot;codespan&quot;&gt;make images&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;验证新构建的 java 可用：&lt;span class=&quot;codespan&quot;&gt;./build/*/images/jdk/bin/java -version&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;测试：&lt;span class=&quot;codespan&quot;&gt;make run-test-tier1&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这个安装步骤大体上没问题，但是有些差异需要指出，因此我也给出我的安装步骤。&lt;/p&gt;

&lt;h3 id=&quot;安装依赖&quot;&gt;安装依赖&lt;/h3&gt;

&lt;p&gt;安装 jre 11 运行时，这个可以通过 brew 来安装，或者直接下载 &lt;a href=&quot;https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html&quot;&gt;oracle&lt;/a&gt; 或 &lt;a href=&quot;https://jdk.java.net/java-se-ri/11&quot;&gt;openjdk&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;因为编译的是比较新的 jdk 11，直接用 xcode 最新版即可（官方推荐的是 9.4，我用的是最新版 10.3 没问题）。&lt;/p&gt;

&lt;p&gt;通过 brew 安装 autoconf 和 freetype。&lt;/p&gt;

&lt;h3 id=&quot;获取源码&quot;&gt;获取源码&lt;/h3&gt;

&lt;p&gt;从 jdk 10 开始，源码不再分散在不同的仓库中，所以只需要 clone 单独的 repository 即可&lt;sup id=&quot;fnref:1:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。我选择是 &lt;a href=&quot;http://hg.openjdk.java.net/jdk-updates/jdk11u&quot;&gt;jdk11u&lt;/a&gt;，而且不是通过 hg clone 的方式(比较慢，经常出错需要重试)，而是直接下载整个源码包，如下图示。&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;
          &lt;picture&gt;
            
            
            &lt;img src=&quot;http://static.wulfric.me/java/jdk11-download.png&quot; alt=&quot;jdk11 download&quot; title=&quot;jdk11 download&quot; width= height= /&gt;
          &lt;/picture&gt;
          &lt;figcaption&gt;&lt;i class='icon-pencil'&gt;&lt;/i&gt;jdk11 download&lt;/figcaption&gt;
        &lt;/figure&gt;&lt;/p&gt;

&lt;h3 id=&quot;编译&quot;&gt;编译&lt;/h3&gt;

&lt;p&gt;执行 configure，为了 debug，需要加上对应的参数。&lt;/p&gt;

&lt;div  class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sh configure &lt;span class=&quot;nt&quot;&gt;--with-target-bits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64 &lt;span class=&quot;nt&quot;&gt;--enable-ccache&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--with-jvm-variants&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;server  &lt;span class=&quot;nt&quot;&gt;--with-boot-jdk-jvmargs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-Xlint:deprecation -Xlint:unchecked&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--disable-warnings-as-errors&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--with-debug-level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;slowdebug 2&amp;gt;&amp;amp;1 | tee configure_mac_x64.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一般第一次执行总是会遇到些小问题，但编译 jdk 11 的问题比 jdk8，9少多了，根据提示很容易就可以解决。当看到如下返回即表明配置成功。&lt;/p&gt;

&lt;div  class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;====================================================&lt;/span&gt;
A new configuration has been successfully created &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
/Users/haidao/Downloads/openjdk11/build/macosx-x86_64-normal-server-slowdebug
using configure arguments &lt;span class=&quot;s1&quot;&gt;'--with-target-bits=64 --enable-ccache --with-jvm-variants=server --with-boot-jdk-jvmargs='&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Xlint&lt;/span&gt;:deprecation &lt;span class=&quot;nt&quot;&gt;-Xlint&lt;/span&gt;:unchecked&lt;span class=&quot;s1&quot;&gt;' --disable-warnings-as-errors --with-debug-level=slowdebug'&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

Configuration summary:
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Debug level:    slowdebug
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; HS debug level: debug
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; JVM variants:   server
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; JVM features:   server: &lt;span class=&quot;s1&quot;&gt;'aot cds cmsgc compiler1 compiler2 dtrace epsilongc g1gc graal jfr jni-check jvmci jvmti management nmt parallelgc serialgc services vm-structs'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; OpenJDK target: OS: macosx, CPU architecture: x86, address length: 64
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Version string: 11-internal+0-adhoc.haidao.openjdk11 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;11-internal&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

Tools summary:
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Boot JDK:       openjdk version &lt;span class=&quot;s2&quot;&gt;&quot;11.0.2&quot;&lt;/span&gt; 2019-01-15 OpenJDK Runtime Environment 18.9 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;build 11.0.2+9&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; OpenJDK 64-Bit Server VM 18.9 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;build 11.0.2+9, mixed mode&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;at /Library/Java/JavaVirtualMachines/openjdk-11.0.2.jdk/Contents/Home&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Toolchain:      clang &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;clang/LLVM from Xcode 10.3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; C Compiler:     Version 10.0.1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;at /usr/bin/clang&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; C++ Compiler:   Version 10.0.1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;at /usr/bin/clang++&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

Build performance summary:
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Cores to use:   4
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Memory limit:   8192 MB
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; ccache status:  Active &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3.7.2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后执行 make 即可。根据 build 文档&lt;sup id=&quot;fnref:1:2&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;，执行 make 不带任何参数等同于&lt;span class=&quot;codespan&quot;&gt;make default&lt;/span&gt;和&lt;span class=&quot;codespan&quot;&gt;make jdk&lt;/span&gt;，这会 build 出一个较小的编译结果，并提供一个 exploded image。不知道怎么翻译 exploded image，大概意思是，这是一个分解开的镜像，可以直接使用，各个模块都是解压好的，不包含源码。这种设计是为了方便 jdk 的开发者渐进式开发，每次 make 只会 recompile 变化的部分。&lt;/p&gt;

&lt;p&gt;其他 make 的常用 target 如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;span class=&quot;codespan&quot;&gt;hotspot&lt;/span&gt; - Build all of hotspot (but only hotspot)&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;codespan&quot;&gt;hotspot-&amp;lt;variant&amp;gt;&lt;/span&gt; - Build just the specified jvm variant&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;codespan&quot;&gt;images&lt;/span&gt; or &lt;span class=&quot;codespan&quot;&gt;product-images&lt;/span&gt; - Build the JDK image&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;codespan&quot;&gt;docs&lt;/span&gt; or &lt;span class=&quot;codespan&quot;&gt;docs-image&lt;/span&gt; - Build the documentation image&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;codespan&quot;&gt;test-image&lt;/span&gt; - Build the test image&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;codespan&quot;&gt;all&lt;/span&gt; or &lt;span class=&quot;codespan&quot;&gt;all-images&lt;/span&gt; - Build all images (product, docs and test)&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;codespan&quot;&gt;bootcycle-images&lt;/span&gt; - Build images twice, second time with newly built JDK (good for testing)&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;codespan&quot;&gt;clean&lt;/span&gt; - Remove all files generated by make, but not those generated by configure&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;codespan&quot;&gt;dist-clean&lt;/span&gt; - Remove all files, including configuration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们以 $BUILD 表示构建结果目录&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;，构建结果目录如下&lt;sup id=&quot;fnref:1:3&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;span class=&quot;codespan&quot;&gt;jdk&lt;/span&gt;: 这就是之前所说的 exploded image 的目录。执行&lt;span class=&quot;codespan&quot;&gt;make jdk&lt;/span&gt;之后，你可以通过运行&lt;span class=&quot;codespan&quot;&gt;$BUILD/jdk/bin/java&lt;/span&gt;直接启动新构建的 JDK。&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;codespan&quot;&gt;images&lt;/span&gt;: 这个目录是 make *-image 的输出位置。例如，&lt;span class=&quot;codespan&quot;&gt;make jdk-image&lt;/span&gt; 会构建出 jdk image， 目录是&lt;span class=&quot;codespan&quot;&gt;images/jdk&lt;/span&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;codespan&quot;&gt;test-results&lt;/span&gt;: 测试结果目录。&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;codespan&quot;&gt;support&lt;/span&gt;:  这个目录保存的是 build 过程中的中间文件，比如源码，对象文件，类文件等。&lt;span class=&quot;codespan&quot;&gt;support&lt;/span&gt;中比较重要的是&lt;span class=&quot;codespan&quot;&gt;gensrc&lt;/span&gt;，它包含生成的源码；&lt;span class=&quot;codespan&quot;&gt;modules_*&lt;/span&gt; 包含了按模块层级分布的文件，它会在之后合并到 jdk 目录下。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由于我们执行的是最简构建，我们主要看下 $BUILD/jdk 和 $BUILD/images/jdk 的差异：&lt;/p&gt;

&lt;div  class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$BUILD&lt;/span&gt;/images/jdk         &lt;span class=&quot;nv&quot;&gt;$BUILD&lt;/span&gt;/jdk
├── bin                   ├── _packages_attribute.done
├── conf                  ├── bin
├── demo                  ├── conf
├── include               ├── include
├── jmods                 ├── lib
├── legal                 ├── modules
├── lib                   └── release
├── man
└── release
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;和 $BUILD/jdk 不一样，$BUILD/images/jdk 这个目录下没有解压好的 modules 目录，而是以压缩包的形式放在 jmods 下。这是自 JAVA 9 引入的模块化打包设计，旨在减小 JAVA 应用的包体积，使得部署更加轻量。&lt;/p&gt;

&lt;p&gt;$BUILD/jdk 下的 lib 目录是动态库文件和调试信息文件，不包含源码。而 $BUILD/images/jdk 下的 lib 目录下的动态库文件没有可执行权限，但包含源码 src.zip。&lt;/p&gt;

&lt;p&gt;$BUILD/jdk 作为 exploded image，不像 product-image 那样需要包含法律文件和 demo。&lt;/p&gt;

&lt;p&gt;除了这些区别之外，二者在使用上没啥差别。&lt;/p&gt;

&lt;p&gt;现在，可以直接通过 $BUILD/jdk/bin/java 来使用编译出来的 JAVA11。你也可以配置 jenv：&lt;span class=&quot;codespan&quot;&gt;jenv add $BUILD/jdk&lt;/span&gt;。关于 jenv 的使用请参看 &lt;a href=&quot;/2017/03/macos-jenv/&quot;&gt;Mac OS 使用 jenv 管理 java 版本&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;配置-idea&quot;&gt;配置 IDEA&lt;/h2&gt;

&lt;p&gt;增加 SDK，配置 classpath 和 sourcepath。配置好 sourcepath 便可以正常查看代码了。&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;
          &lt;picture&gt;
            
            
            &lt;img src=&quot;http://static.wulfric.me/java/jdk11-classpath.png&quot; alt=&quot;jdk11 classpath&quot; title=&quot;jdk11 classpath&quot; width= height= /&gt;
          &lt;/picture&gt;
          &lt;figcaption&gt;&lt;i class='icon-pencil'&gt;&lt;/i&gt;jdk11 classpath&lt;/figcaption&gt;
        &lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;如果使用的是 $BUILD/images/jdk，直接将该目录加入到 classpath 即可，IDE 会自动识别 src.zip 并放在 sourcepath 中；&lt;/p&gt;

&lt;p&gt;如果使用的是 $BUILD/jdk，由于这是 exploded image jdk，不包含源码，所以需要分别加入 classpath 和 sourcepath，sourcepath 即下载的 openjdk 下的 src 目录。&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;
          &lt;picture&gt;
            
            
            &lt;img src=&quot;http://static.wulfric.me/java/jdk11-sourcepath.png&quot; alt=&quot;jdk11 sourcepath&quot; title=&quot;jdk11 sourcepath&quot; width= height= /&gt;
          &lt;/picture&gt;
          &lt;figcaption&gt;&lt;i class='icon-pencil'&gt;&lt;/i&gt;jdk11 sourcepath&lt;/figcaption&gt;
        &lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;其他需要修改的配置不在赘述，如下图示。&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;
          &lt;picture&gt;
            
            
            &lt;img src=&quot;http://static.wulfric.me/java/jdk11-ide-conf.png&quot; alt=&quot;jdk11 ide conf&quot; title=&quot;jdk11 ide conf&quot; width= height= /&gt;
          &lt;/picture&gt;
          &lt;figcaption&gt;&lt;i class='icon-pencil'&gt;&lt;/i&gt;jdk11 ide conf&lt;/figcaption&gt;
        &lt;/figure&gt;&lt;/p&gt;

&lt;h2 id=&quot;配置调试&quot;&gt;配置调试&lt;/h2&gt;

&lt;p&gt;在 IDE sdk 中配置好 jdk 11 之后便可以正常调试 JAVA 代码了。如果我们想调试 jdk/jvm 源码的 C 代码怎么办呢？我们已经 build 一个可以 debug 的 java11 运行环境，下面就是配置 IDE 来 debug。&lt;/p&gt;

&lt;h3 id=&quot;clion-调试-jvm-代码&quot;&gt;clion 调试 jvm 代码&lt;/h3&gt;

&lt;p&gt;首先导入源码。使用 New Cmake Project from Sources，这样可以自动创建 CMakeLists.txt 文件。然后按照引导即可导入源码。你可以导入 src/hotspot，也可以整个导入 src。&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;
          &lt;picture&gt;
            
            
            &lt;img src=&quot;http://static.wulfric.me/java/clion-debug-jvm.png&quot; alt=&quot;clion debug jvm&quot; title=&quot;clion debug jvm&quot; width= height= /&gt;
          &lt;/picture&gt;
          &lt;figcaption&gt;&lt;i class='icon-pencil'&gt;&lt;/i&gt;clion debug jvm&lt;/figcaption&gt;
        &lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;导入之后，具体的 cpp 文件会报错，但是不影响调试，可以暂时忽略。&lt;/p&gt;

&lt;p&gt;导入成功，reload CMakeLists.txt 之后，会自动生成一个 debug configuration。下面配置 debug configuration。如图所示，将 executable 改为你的 java 二进制文件，然后在 program arguments 里设置程序参数。我们先设置为 -version。&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;
          &lt;picture&gt;
            
            
            &lt;img src=&quot;http://static.wulfric.me/java/jdk11-debug1.png&quot; alt=&quot;jdk11 debug1&quot; title=&quot;jdk11 debug1&quot; width= height= /&gt;
          &lt;/picture&gt;
          &lt;figcaption&gt;&lt;i class='icon-pencil'&gt;&lt;/i&gt;jdk11 debug1&lt;/figcaption&gt;
        &lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;此时我们在&lt;span class=&quot;codespan&quot;&gt;share/prims/jni.cpp&lt;/span&gt;文件上打一个断点，然后执行 debug，就可以看到效果了。&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;
          &lt;picture&gt;
            
            
            &lt;img src=&quot;http://static.wulfric.me/java/jdk11-debug2.png&quot; alt=&quot;jdk11 debug2&quot; title=&quot;jdk11 debug2&quot; width= height= /&gt;
          &lt;/picture&gt;
          &lt;figcaption&gt;&lt;i class='icon-pencil'&gt;&lt;/i&gt;jdk11 debug2&lt;/figcaption&gt;
        &lt;/figure&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;每个下载的 jdk 中都有一个 build 文档，一般在 doc 目录下。这是编译安装该 jdk 的最权威的参考文档。jdk11 的在线 build 文档是：&lt;a href=&quot;https://hg.openjdk.java.net/jdk/jdk11/raw-file/tip/doc/building.html&quot;&gt;Building the JDK 11&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:1:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;#fnref:1:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;#fnref:1:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;$BUILD 表示你构建出来的结果的目录，一般是你下载的 openjdk11 下的 build/xxx，xxx 是一个动态的名称，和你的开发机类型、编译参数有关，在我的机器上是 ./openjdk11/build/macosx-x86_64-normal-server-slowdebug。 &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 02 Sep 2019 23:32:00 +0800</pubDate>
        <link>http://wulfric.me/2019/09/java11-install-debug/</link>
        <guid isPermaLink="true">http://wulfric.me/2019/09/java11-install-debug/</guid>
        
        <category>java</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title>对敏捷开发实践的思考</title>
        <description>&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;

&lt;p&gt;在加入现在的公司之前，我曾经在一家创业公司工作过几年，经历了从4，5人发展到上百人的过程。一开始老板就按照敏捷开发的套路执行项目管理。说是敏捷开发，其实也不算全面，主要是每日站会、看板管理、快速迭代等。之后由于随着人数扩大，但没有相应的调整开发策略，导致敏捷开发渐渐事实上废弃掉了。后面又由于要支持业务快速增长，项目开发质量没有很好的控制住，导致产品体验不够好，系统质量不稳定。为了解决这些问题，敏捷开发又被重新推到台前。&lt;/p&gt;

&lt;p&gt;本文便是我在这段经历中，对敏捷开发的见识和理解。出于安全考虑，我们将业务特定场景转换了通用场景，并给我们的虚拟公司起一个名字：让世界变得更加热闹的上市公司，简称 SOS 公司（好老的梗）。&lt;/p&gt;

&lt;h2 id=&quot;开发模式简介&quot;&gt;开发模式简介&lt;/h2&gt;

&lt;p&gt;我想先介绍一下几种常见的开发模式，如果您不关心，这部分可以跳过。&lt;/p&gt;

&lt;p&gt;在项目开发中，我们常用到下面几种开发模式。&lt;/p&gt;

&lt;h3 id=&quot;瀑布式开发&quot;&gt;瀑布式开发&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.wikiwand.com/en/Waterfall_model&quot;&gt;瀑布式开发&lt;/a&gt;是一种传统的计算机软件开发方法。它强调开发进度像瀑布一样，沿着固定的状态流动。即严格按照预先计划的需求分析、设计、编码、集成、测试、维护的步骤顺序进行。&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;
          &lt;picture&gt;
            
            
            &lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/e/e2/Waterfall_model.svg/800px-Waterfall_model.svg.png?1546152701225&quot; alt=&quot;瀑布式开发--来自维基百科&quot; width= height= /&gt;
          &lt;/picture&gt;
          &lt;figcaption&gt;&lt;i class='icon-pencil'&gt;&lt;/i&gt;瀑布式开发--来自维基百科&lt;/figcaption&gt;
        &lt;/figure&gt;&lt;/p&gt;

&lt;h3 id=&quot;迭代式开发&quot;&gt;迭代式开发&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.wikiwand.com/en/Iterative_and_incremental_development&quot;&gt;迭代式开发&lt;/a&gt;也被称作迭代增量式开发或迭代进化式开发，是一种与传统的瀑布式开发相反的软件开发过程，它弥补了传统开发方式中的一些弱点，具有更高的成功率和生产率。&lt;/p&gt;

&lt;p&gt;在迭代式开发方法中，整个开发工作被组织为一系列的短小的、固定长度（如3周）的小项目，被称为一系列的迭代。每一次迭代都包括了需求分析、设计、实现与测试。采用这种方法，开发工作可以在需求被完整地确定之前启动，并在一次迭代中完成系统的一部分功能或业务逻辑的开发工作。再通过客户的反馈来细化需求，并开始新一轮的迭代。&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;
          &lt;picture&gt;
            
            
            &lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/3/39/Iterative_development_model.svg/640px-Iterative_development_model.svg.png?1546154989142&quot; alt=&quot;迭代式开发--来自维基百科&quot; width= height= /&gt;
          &lt;/picture&gt;
          &lt;figcaption&gt;&lt;i class='icon-pencil'&gt;&lt;/i&gt;迭代式开发--来自维基百科&lt;/figcaption&gt;
        &lt;/figure&gt;&lt;/p&gt;

&lt;h3 id=&quot;螺旋式开发&quot;&gt;螺旋式开发&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.wikiwand.com/en/Spiral_model&quot;&gt;螺旋模型&lt;/a&gt;是一种演化软件开发过程模型，它兼顾了快速原型的迭代的特征以及瀑布模型的系统化与严格监控。螺旋模型最大的特点在于引入了其他模型不具备的风险分析，使软件在无法排除重大风险时有机会停止，以减小损失。同时，在每个迭代阶段构建原型是螺旋模型用以减小风险的途径。螺旋模型更适合大型的昂贵的系统级的软件应用。&lt;/p&gt;

&lt;p&gt;可以看出，螺旋式开发强调风险评估，同样也是一种迭代，只不过是螺旋式的迭代&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;
          &lt;picture&gt;
            
            
            &lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/0*xUPmGSQEX-40Z7Ag.png&quot; alt=&quot;螺旋式开发&quot; width= height= /&gt;
          &lt;/picture&gt;
          &lt;figcaption&gt;&lt;i class='icon-pencil'&gt;&lt;/i&gt;螺旋式开发&lt;/figcaption&gt;
        &lt;/figure&gt;&lt;/p&gt;

&lt;h3 id=&quot;敏捷开发&quot;&gt;敏捷开发&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.wikiwand.com/en/Agile_software_development&quot;&gt;敏捷软件开发&lt;/a&gt;（英语：Agile software development），又称敏捷开发，是一种从1990年代开始逐渐引起广泛关注的一些新型软件开发方法，是一种应对快速变化的需求的一种软件开发能力。它们的具体名称、理念、过程、术语都不尽相同，相对于“非敏捷”，更强调程序员团队与业务专家之间的紧密协作、面对面的沟通（认为比书面的文档更有效）、频繁交付新的软件版本、紧凑而自我组织型的团队、能够很好地适应需求变化的代码编写和团队组织方法，也更注重软件开发过程中人的作用。&lt;/p&gt;

&lt;p&gt;敏捷开发最着重强调的是价值观而不是具体的形式或流程，这是它和其他开发模式很不一样的地方。也因为这样，在具体的敏捷开发的实践中，瀑布、迭代、螺旋等开发方式都可能会用到，而差别主要在于：敏捷开发往往有更小的迭代规模&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;；敏捷开发不应过度设计未知的需求&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;从上面的介绍我们可以看出来，其实实际的大多数开发方式都是混搭的。很多公司或团队会声称使用敏捷开发，实际使用中很有可能会退化到其他基本开发方式。这些都是正常的，合适的才是最好的。如果一个好的开发模型实施起来很有难度，要么该模型不适合当前场景，要么使用方法不恰当。这方面后面也会提到。&lt;/p&gt;

&lt;h2 id=&quot;早期敏捷实践&quot;&gt;早期敏捷实践&lt;/h2&gt;

&lt;p&gt;SOS 公司的团队早期人数较少，业务也不是很复杂，主要目的是快速出 MVP，接受市场的评估并及时跟进。所以在初创期就已经施行了一个比较粗糙的敏捷开发。主要内容是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;每日站会，介绍前一天的工作内容和遇到的问题&lt;/li&gt;
  &lt;li&gt;快速迭代上线&lt;/li&gt;
  &lt;li&gt;通过看板管理项目进度，排期计划&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;每日站会的目的就是互通有无，大家能够快速了解小组成员的工作内容，潜在风险等。这个时候每日站会，大家可以快速的了解同事目前在做哪些工作，遇到哪些问题，而这些问题很可能自己这几天刚刚遇到过。基于早期业务发展方向比较单一，内容也比较少，通过每日站会，所有开发者几乎都可以对业务有一个比较清晰的全局认识。&lt;/p&gt;

&lt;p&gt;随着业务发展和壮大，员工数量也开始大量增长，业务需求日益复杂。此时大家渐渐感觉每日站会不是那么有效了。早期还是不过 5，6 个人一起站会，但这时经常是 10 好几个人甚至 20 多人，而且大家的业务内容的差异也越来越大。显而易见，同事们开始听不懂对方站会汇报的内容了，站会上提出的问题也不再关心。同时由于人数太多，站会也渐渐变得冗长。这种情况下，我相信每次开站会的时候很多人都在开小差：这个人说的是啥？那个人遇到的问题感觉和我没多大关系啊？昨天晚上那把飞龙骑脸怎么也输了？午饭吃啥好？&lt;/p&gt;

&lt;p&gt;经过一段时间痛苦的折磨，这种每日站会渐渐就废弃了，仅保留每周周会和勉强及格的迭代速度。同时由于业务差异性，不再强制每个开发都使用看板管理项目，而是分到具体的小组由每个小组自己负责。对于某些不方便拆分任务的业务小组，看板这个工具也渐渐处于事实上的弃用状态。&lt;/p&gt;

&lt;p&gt;SOS 公司的业务仍然在快速发展中，业务需求迫使产品设计和项目开发无法很好的保证质量和可扩展性。在这一过程中，渐渐出现如下几个问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;产品质量下降，产品逻辑有不自洽的地方；代码质量下降，bug 增多，用户体验下降&lt;/li&gt;
  &lt;li&gt;早期建立起来的核心竞争力优势开始下降，竞品已经渐渐追上&lt;/li&gt;
  &lt;li&gt;粗糙的单体应用架构陈旧，无法承载日益繁多和复杂的业务需求&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;造成这些问题的原因是多种多样的，并非全是产品和技术开发模式的过错，激进的市场计划和营销策略等也会带来一定的影响。但这个问题归根结底是一个技术问题，可以通过技术的手段解决。&lt;/p&gt;

&lt;h2 id=&quot;解决方案&quot;&gt;解决方案&lt;/h2&gt;

&lt;p&gt;定义了存在的问题，并抽象归纳以批量解决问题，SOS 公司决定实施两大战略：增长和重构。&lt;/p&gt;

&lt;p&gt;为了实施这两个战略，需要向运营和市场说明当前问题的紧迫性，赢得他们的支持。事实上，这件事还是挺难的，以至于运营一直以为产品研发团队的当前战略是：改 bug。战略实施者需要当前要做的事情的本质诉求，以及背后的价值和意义。只有运营充分理解这两个战略，才能更好的配合产品和研发的工作（暂缓业务拓展和承接需求）。&lt;/p&gt;

&lt;p&gt;增长战略的工作内容有：重新梳理用户需求，整理出用户故事地图，并建立用户画像，分清客户的行业背景，使用习惯、痛点等的差异。使用敏捷开发，全面优化产品的每个阶段（导流，留存，沉淀等等）。&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;
          &lt;picture&gt;
            
            
            &lt;img src=&quot;http://static.wulfric.me/R-aarrr-model.png&quot; alt=&quot;AARRR 模型&quot; width= height= /&gt;
          &lt;/picture&gt;
          &lt;figcaption&gt;&lt;i class='icon-pencil'&gt;&lt;/i&gt;AARRR 模型&lt;/figcaption&gt;
        &lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;如上图所示，产品团队针对 AARRR 模型开了 5 个小组，分别研究：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;获取用户：增加下载量、激活量，增加新用户数，降低用户获客成本&lt;/li&gt;
  &lt;li&gt;激发活跃：增加七日回访率，增加登录和使用时长&lt;/li&gt;
  &lt;li&gt;提高留存：增加次日留存率、七日留存率，降低用户流失率&lt;/li&gt;
  &lt;li&gt;增加收入：增加复购率、付费率，增加人均付费额&lt;/li&gt;
  &lt;li&gt;推荐传播：增加转发率，增加二次推荐率，增加搜索引擎收录数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在每个小组内部，都会根据用户画像（行业化背景等）梳理对应的方案。我对产品的工作不怎么了解，这里就不多介绍了。落实到技术上就是，产品给出项目计划大图和里程碑目标，并和研发一起拆分需求，设计上要尽量能够支持 2 周即可完成一个迭代。&lt;/p&gt;

&lt;p&gt;另一部分就是重构单体应用。单体应用的重构，或者说服务化拆分，文章、书籍非常多，而针对具体的场景和业务差别也挺大的，就不班门弄斧了，只谈谈我们做了什么。&lt;/p&gt;

&lt;p&gt;服务化拆分最重要的当然就是梳理领域模型，划分限界上下文。但在我们规划中给这部分留的时间太少了。在梳理领域模型的时候，我们要求整理该领域所有的对外提供的业务员接口和内部调用关系，这都需要对业务熟悉的老员工来整理，因此往往是 Blocked 的，而即使是老员工，也几乎没有对该领域所有业务内容都熟悉的，因此这部分工作是延期的；整理抽取出限界上下文之后，需要评估有多少重写的工作量，比如参数校验、权限校验、BO、DO、DTO 等都有可能，但这部分有些轻视，低估了工作量，最终也导致了延期。&lt;/p&gt;

&lt;p&gt;但接口梳理工作做得好的直接好处就是：敏捷迭代的拆分变得极为简单。我们以对外提供服务的接口为粒度分配敏捷开发迭代任务，在业务梳理清楚，基础模块重写工作做完之后，每个接口从请求一直到数据库的工作量的评估就非常容易，而且每个接口背后的工作量都不大。按照我们的应用的规模和实际的经验，每 2 周能重构 15 个左右的接口。在早期磨合&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;完成之后几乎不会因为自身原因延期。同时，我们对每个接口都设置了路由切换，每次迭代的任何接口都可以随时回滚，大大降低了上线风险。&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;https://medium.com/existek/sdlc-models-explained-agile-waterfall-v-shaped-iterative-spiral-e3f012f390c5 &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;https://stackoverflow.com/questions/11842318/difference-between-agile-and-iterative-and-incremental-development &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;https://stackoverflow.com/questions/253789/agile-vs-spiral-model-for-sdlc &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;为了保障敏捷开发的快速迭代得以实现，我们补上了之前比较欠缺的服务监控、数据库 sql 监控；代码健康分检查（用 sonarqube 检查测试覆盖率，code smell 和 bug 数）；单元测试和服务压测。这部分在早期磨合的时候会造成一定程度的延期。 &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 30 Dec 2018 18:59:00 +0800</pubDate>
        <link>http://wulfric.me/2018/12/agile-practice/</link>
        <guid isPermaLink="true">http://wulfric.me/2018/12/agile-practice/</guid>
        
        <category>agile</category>
        
        <category>敏捷</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title>nginx 502 和 504 超时演示</title>
        <description>&lt;p&gt;最近线上 nginx 遇到了一些较难排查的 502 和 504 错误，顺便了解了一下 nginx 的相关配置。我发现网上很多介绍 nginx 超时配置只是列了这几个配置的含义和数值，并没有解释什么原因会触发哪个配置。因此趁这个机会演示一下，如何让 nginx 符合预期正确出现 502 和 504。&lt;/p&gt;

&lt;h2 id=&quot;502-和-504-的解释&quot;&gt;502 和 504 的解释&lt;/h2&gt;

&lt;p&gt;在 http status 的 &lt;a href=&quot;https://www.wikiwand.com/en/List_of_HTTP_status_codes&quot;&gt;定义&lt;/a&gt; 中：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;502 Bad Gateway: The server was acting as a &lt;a href=&quot;https://www.wikiwand.com/en/Gateway_(telecommunications)&quot;&gt;gateway&lt;/a&gt; or proxy and received an invalid response from the upstream server.&lt;/li&gt;
  &lt;li&gt;504: he server was acting as a gateway or proxy and did not receive a timely response from the upstream server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;502 的错误原因是 Bad Gateway，一般是由于上游服务的故障引起的；而 504 则是 nginx 访问上游服务超时，二者完全是两个意思。但在某些情况下，上游服务的超时（触发 tcp reset）也可能引发 502，我们会在之后详述。&lt;/p&gt;

&lt;h2 id=&quot;演示环境&quot;&gt;演示环境&lt;/h2&gt;

&lt;p&gt;你需要 3 个逻辑组件：nginx 服务器，php-fpm，client 访问客户端。3 个组件可以在同一台机器中，我用的是 docker 来配置 PHP 和 nginx 环境，在宿主机上访问。如果你很熟悉这 3 个组件，这部分可以跳过。用 docker 来做各种测试和实验非常方便，这里就不展开了。docker-compose 的配置参考了这篇&lt;a href=&quot;http://geekyplatypus.com/dockerise-your-php-application-with-nginx-and-php7-fpm/&quot;&gt;文章&lt;/a&gt;。我的 docker composer 文件如下：&lt;/p&gt;

&lt;div  class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx:alpine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;8080:80&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./code:/code&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./nginx/site.conf:/etc/nginx/conf.d/site.conf&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;php&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;php&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;php:7.1-fpm-alpine&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./code:/code&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./php/php-fpm.conf:/usr/local/etc/php-fpm.conf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用的镜像都是基于 &lt;a href=&quot;https://hub.docker.com/_/alpine/&quot;&gt;alpine&lt;/a&gt; 制作的，非常小巧：&lt;/p&gt;

&lt;div  class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;REPOSITORY  TAG               SIZE
php         7.1-fpm-alpin     69.5MB
nginx       alpine            18.6MB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;nginx 的配置：&lt;/p&gt;

&lt;div  class=&quot;language-nginx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.php&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;server_name&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;php-docker.local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;error_log&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;/var/log/nginx/error.log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;access_log&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/var/log/nginx/access.log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;\.php$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;try_files&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;fastcgi_split_path_info&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;^(.+&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.php)(/.+)&lt;/span&gt;$&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;fastcgi_pass&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;fastcgi_index&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.php&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fastcgi_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;fastcgi_param&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;SCRIPT_FILENAME&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$document_root$fastcgi_script_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;fastcgi_param&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PATH_INFO&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$fastcgi_path_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;fastcgi_connect_timeout&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;fastcgi_read_timeout&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;8s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;fastcgi_send_timeout&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;php-fpm 的配置&lt;/p&gt;

&lt;div  class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;global]
&lt;span class=&quot;nv&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;etc/php-fpm.d/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.conf
&lt;span class=&quot;nv&quot;&gt;request_terminate_timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;代码放在 &lt;a href=&quot;https://github.com/wwulfric/nginx-timeout-demo&quot;&gt;github&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;关键参数&quot;&gt;关键参数&lt;/h2&gt;

&lt;p&gt;在这个演示中，PHP 的关键参数有两个，一个是 PHP 脚本的 max_execution_time，这个配置在&lt;span class=&quot;codespan&quot;&gt;php.ini&lt;/span&gt;中；另一个是 php-fpm 的 request_terminate_timeout，在&lt;span class=&quot;codespan&quot;&gt;php-fpm.conf&lt;/span&gt;中。当以 php-fpm 提供服务时，request_terminate_timeout 设置会覆盖 max_execution_time 的设置，因此我们这里只测试 request_terminate_timeout。&lt;/p&gt;

&lt;p&gt;request_terminate_timeout 的意思是 php-fpm 接受的请求的超时时间，超过这个时间 php-fpm 会 kill 掉执行脚本的 worker 进程。&lt;/p&gt;

&lt;p&gt;nginx的关键参数是 fastcgi 相关的 timeout，即：fastcgi_connect_timeout，fastcgi_read_timeout，fastcgi_send_timeout。&lt;/p&gt;

&lt;p&gt;这几个 nginx 参数的主语都是 nginx，所以 fastcgi_connect_timeout 的意思是 nginx 连接到 fastcgi 的超时时间，fastcgi_read_timeout 是 nginx 读取 fastcgi 的内容的超时时间，fastcgi_send_timeout 是 nginx 发送内容到 fastcgi 的超时时间。&lt;/p&gt;

&lt;h2 id=&quot;演示过程&quot;&gt;演示过程&lt;/h2&gt;

&lt;p&gt;首先启动 nginx 和 PHP：&lt;/p&gt;

&lt;div  class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 code 文件夹下添加一个 index.php 文件：&lt;/p&gt;

&lt;div  class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hello world'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;上游服务主动-reset&quot;&gt;上游服务主动 reset&lt;/h3&gt;

&lt;p&gt;访问 php-docker.local:8080/index.php，报错 502 bad gateway。而且是在 3s 之后报的错，说明触发了 request_terminate_timeout 设置，php-fpm 关闭了连接。&lt;/p&gt;

&lt;p&gt;通过观察 &lt;span class=&quot;codespan&quot;&gt;ps aux | grep php&lt;/span&gt; 可以发现，php-fpm 是通过杀掉超时的进程来解决进程超时问题的（pid 每次有一个会变化，说明一个进程杀掉了，并启动了另一个进程。这和 php-fpm 的进程池设定有关，你的设定未必会重新启动一个新的进程）。&lt;/p&gt;

&lt;div  class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/var/www/html &lt;span class=&quot;c&quot;&gt;# ps aux | grep php&lt;/span&gt;
    1 root       0:00 php-fpm: master process &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/usr/local/etc/php-fpm.conf&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    6 www-data   0:00 php-fpm: pool www
    7 www-data   0:00 php-fpm: pool www
/var/www/html &lt;span class=&quot;c&quot;&gt;# ps aux | grep php&lt;/span&gt;
    1 root       0:00 php-fpm: master process &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/usr/local/etc/php-fpm.conf&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    7 www-data   0:00 php-fpm: pool www
   17 www-data   0:00 php-fpm: pool www
/var/www/html &lt;span class=&quot;c&quot;&gt;# ps aux | grep php&lt;/span&gt;
    1 root       0:00 php-fpm: master process &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/usr/local/etc/php-fpm.conf&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   17 www-data   0:00 php-fpm: pool www
   20 www-data   0:00 php-fpm: pool www
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在这种情况下，nginx 日志中的错误是：&lt;/p&gt;

&lt;div  class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;recv() failed (104: Connection reset by peer) while reading response header from upstream
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;即连接被服务端（PHP）reset 了，也就很好理解了。&lt;/p&gt;

&lt;p&gt;注意，在这种情况下，php-fpm 的日志中也会记录的：&lt;/p&gt;

&lt;div  class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;php_1  | [18-Jul-2018 16:33:42] WARNING: [pool www] child 5, script '/code/index.php' (request: &quot;GET /index.php&quot;) execution timed out (3.040130 sec), terminating
php_1  | [18-Jul-2018 16:33:42] WARNING: [pool www] child 5 exited on signal 15 (SIGTERM) after 30.035736 seconds from start
php_1  | [18-Jul-2018 16:33:42] NOTICE: [pool www] child 8 started
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这也是可以发现问题的一个地方。&lt;/p&gt;

&lt;h3 id=&quot;nginx-读取上游服务超时&quot;&gt;nginx 读取上游服务超时&lt;/h3&gt;

&lt;p&gt;删掉 request_terminate_timeout 配置，重启应用：&lt;/p&gt;

&lt;div  class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker-compose down &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker-compose up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时，PHP 脚本将要执行 70s，肯定超过 nginx 设置的超时时间，get 一下发现确实如此，8s 之后抛出 504 Gateway Time-out 错误，nginx 日志是：&lt;/p&gt;

&lt;div  class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;upstream timed out (110: Operation timed out) while reading response header from upstream
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;说明触发了 fastcgi_read_timeout 设置。&lt;/p&gt;

&lt;h3 id=&quot;关闭上游服务&quot;&gt;关闭上游服务&lt;/h3&gt;

&lt;p&gt;关掉 PHP 服务：&lt;/p&gt;

&lt;div  class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker-composer stop php
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;PHP 服务停掉之后第一次访问，得到 504 错误，错误是：&lt;/p&gt;

&lt;div  class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;upstream timed out (110: Operation timed out) while connecting to upstream
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;超时时间为 fastcgi_connect_timeout 的设置。说明这个时候 tcp 连接还在，但是尝试连接的时候失败了。&lt;/p&gt;

&lt;p&gt;再次访问，得到 502 错误，错误是：&lt;/p&gt;

&lt;div  class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;connect() failed (113: Host is unreachable) while connecting to upstream
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;502 的原因很容易理解，上游服务挂了，同时因为之前访问的时候发现连接不上就把连接断掉了，再次连接的时候便无法找到 host 了。&lt;/p&gt;

&lt;p&gt;我曾怀疑第一次访问 504 是由于 keepalive。但我停掉 PHP 之后隔了好久才发第一个请求，仍然是这个结果。&lt;/p&gt;

&lt;p&gt;如果将 nginx fastcgi_pass 配置为 127.0.0.1:9000（本地没有这个端口），则马上就会抛出 502 错误，错误为：&lt;/p&gt;

&lt;div  class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;connect() failed (111: Connection refused) while connecting to upstream
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;登入 nginx 服务，使用 tcpdump 监控 9000 上的通信：&lt;/p&gt;

&lt;div  class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tcpdump &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-nnA&lt;/span&gt; tcp port 9000
&lt;span class=&quot;c&quot;&gt;# 如果你的 PHP 在本地，eth0 应该改成 lo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们发现，当 PHP 关闭之后第一次访问，nginx 会尝试向 PHP 发起若干次 TCP SYN 请求，但 PHP 显然不会响应，这个时候 nginx 就返回了 504。第二次访问的时候 nginx 根本不会发起任何请求，直接 502 了&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。如果我们这个时候执行&lt;span class=&quot;codespan&quot;&gt;nginx -t&lt;/span&gt;会发现，nginx 已经认为配置文件有问题了：nginx: configuration file /etc/nginx/nginx.conf test failed。&lt;/p&gt;

&lt;h3 id=&quot;换一种配置&quot;&gt;换一种配置&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://sandro-keil.de/blog/2017/07/24/let-nginx-start-if-upstream-host-is-unavailable-or-down/&quot;&gt;这篇文章&lt;/a&gt; 提到，我们之前的 nginx 配置并不合理&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;，我们重新设置 nginx：&lt;/p&gt;

&lt;div  class=&quot;language-nginx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.php&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;server_name&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;php-docker.local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;error_log&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;/var/log/nginx/error.log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;access_log&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/var/log/nginx/access.log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;resolver&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;127&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.0.0.11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# here
&lt;/span&gt;  &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;\.php$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$upstream&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;php&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# here
&lt;/span&gt;    &lt;span class=&quot;kn&quot;&gt;try_files&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;fastcgi_split_path_info&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;^(.+&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.php)(/.+)&lt;/span&gt;$&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;fastcgi_pass&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$upstream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# here
&lt;/span&gt;    &lt;span class=&quot;kn&quot;&gt;fastcgi_index&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.php&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fastcgi_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;fastcgi_param&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;SCRIPT_FILENAME&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$document_root$fastcgi_script_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;fastcgi_param&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PATH_INFO&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$fastcgi_path_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;fastcgi_connect_timeout&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;fastcgi_read_timeout&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;8s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;fastcgi_send_timeout&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中 127.0.0.11 是 docker 的内网 dns resolver。该配置动态指定 fastcgi pass，所以 nginx 不会检查该连接能否建立起来。&lt;/p&gt;

&lt;p&gt;按照这个配置启动，先访问 index.php 建立连接，然后关闭 PHP，表现为：&lt;/p&gt;

&lt;p&gt;在 keepalive 期间，抛出 504 错误，超时时间为 fastcgi_connect_timeout，错误是：&lt;/p&gt;

&lt;div  class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;upstream timed out (110: Operation timed out) while connecting to upstream
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;keepalive 断线之后，抛出 502 错误，超时时间不定，错误是：&lt;/p&gt;

&lt;div  class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;connect() failed (113: Host is unreachable) while connecting to upstream
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;按照&lt;a href=&quot;https://sandro-keil.de/blog/2017/07/24/let-nginx-start-if-upstream-host-is-unavailable-or-down/&quot;&gt;这篇文章&lt;/a&gt;所说，这种配置 nginx 不会认为有问题，执行&lt;span class=&quot;codespan&quot;&gt;nginx -t&lt;/span&gt;确实如此。在 &lt;strong&gt;一段时间&lt;/strong&gt; 内，每次请求 nginx 都会向 upstream 发送 SYN，这段时间的状态码都是 504，之后再访问就不再发 TCP 包，状态码也变成 502。&lt;/p&gt;

&lt;h3 id=&quot;其他&quot;&gt;其他&lt;/h3&gt;

&lt;p&gt;除此之外，PHP 脚本还有一个超时时间的设置：max_execution_time。它是限制 PHP 脚本的执行时间，但这个时间不会计算系统调用（比如 sleep，io，等）。因为该原因导致 PHP 杀掉进程时，会抛出 fatal error，而 php-fpm 不会有 fatal error。&lt;/p&gt;

&lt;p&gt;这里实验使用的是 PHP 的 fastcgi 工作方式，如果是 nginx 通过代理的方式连接上游服务的话，fastcgi_connect_timeout，fastcgi_read_timeout，fastcgi_send_timeout 都需要替换成对应的 proxy_connect_timeout，proxy_read_timeout，proxy_send_timeout。&lt;/p&gt;

&lt;h2 id=&quot;结论&quot;&gt;结论&lt;/h2&gt;

&lt;p&gt;504 的原因比较简单，一般都是上游服务的执行时间超过了 nginx 的等待时间，这种情况是由于上游服务的业务太过耗时导致的，或者连接到上游服务器超时。从上面的实验来看，后者的原因比较难以追踪，因为这种情况下连接是存在的，但是却连不上，好在这种 504 一般都会在一段时间后转为 502。&lt;/p&gt;

&lt;p&gt;502 的原因是由于上游服务器的故障，比如停机，进程被杀死，上游服务 reset 了连接，进程僵死等各种原因。在 nginx 的日志中我们能够发现 502 错误的具体原因，分别为：&lt;span class=&quot;codespan&quot;&gt;104: Connection reset by peer&lt;/span&gt;，&lt;span class=&quot;codespan&quot;&gt;113: Host is unreachable&lt;/span&gt;，&lt;span class=&quot;codespan&quot;&gt;111: Connection refused&lt;/span&gt;。&lt;/p&gt;

&lt;p&gt;有一些细节上的差别和 nginx 的工作原理有关，这部分尚未深挖。&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;按理说，既然 nginx 已经知道 PHP 不可达，不去发 TCP 请求了，那么应该立即 502 才是。实验中发现，这种情况下的 502 有 3s 左右的延时，不知何故。 &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://sandro-keil.de/blog/2017/07/24/let-nginx-start-if-upstream-host-is-unavailable-or-down/&quot;&gt;这篇文章&lt;/a&gt; 表明，我们之前的设置中，如果 PHP 没有先启动起来，那么 nginx 也是启动不起来的，这种设置并不合理：nginx 的一台上游服务有问题，结果 nginx 就无法提供服务了。但这和我们的演示关系不大，因此并没有在正文中过多描述。 &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 19 Jul 2018 19:26:00 +0800</pubDate>
        <link>http://wulfric.me/2018/07/nginx-demo/</link>
        <guid isPermaLink="true">http://wulfric.me/2018/07/nginx-demo/</guid>
        
        <category>nginx</category>
        
        <category>php-fpm</category>
        
        <category>php</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title>Builder 模式如何验证对象的 fields</title>
        <description>&lt;p&gt;Effective Java 的 &lt;a href=&quot;/2017/11/effetive-java-2#Item2&quot;&gt;item 2&lt;/a&gt; 的 Builder 模式可以在 Builder 的 build 中检查参数是否符合约束条件，原文和中文版译文是这样的：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is critical that they be checked after copying the parameters from the builder to the object, and that they be checked on the object fields rather than the builder fields. If any invariants are violated, the build method should throw an &lt;em&gt;IllegalStateException&lt;/em&gt;.&lt;/p&gt;

  &lt;p&gt;将参数从 builder 拷贝到对象中之后，并在对象域而不是 builder 域中对它们进行检验，这一点很重要。如果违反了任何约束条件，&lt;span class=&quot;codespan&quot;&gt;build&lt;/span&gt;方法就应该抛出&lt;span class=&quot;codespan&quot;&gt;IllegalStateException&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;那么为什么要在对象域而不是 builder 域中验证这些 class invariant 呢？原文中有两个要点，一个是参数要从 builder 拷贝到对象中，另一个是要在对象的 fields 上做验证。&lt;/p&gt;

&lt;h3 id=&quot;验证对象的-fields&quot;&gt;验证对象的 fields&lt;/h3&gt;

&lt;p&gt;我们看下这个解释&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The constructor is where the validation occurs. Even when you're not using the builder pattern, constructors are responsible for ensuring that the object is in a valid state when it is created. And the constructor should create defensive copies  and validate the new object's fields, &lt;strong&gt;not&lt;/strong&gt; the builder's fields, because the builder could be mutated while the fields are being copied.&lt;/p&gt;

  &lt;p&gt;所谓构造器就是字段验证所在的地方。即使你没有使用 builder 模式，也是构造器来负责检查一个对象在创建的时候是否处于正常的状态。构造器应该防御性拷贝参数，并验证新创建的对象上的字段，而不是 builder 的字段。因为在拷贝字段的时候，builder 是可变的（mutable）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;很容易理解为什么要在对象的 fields 上验证。对象上的 fields 构成了对象内部的状态，而 Builder 仅仅是一个辅助创建对象的工具，所以应该在对象的 fields 上验证这些 class invariant。&lt;/p&gt;

&lt;p&gt;另外，Builder 可能并不是创建对象的唯一方法，如果我们在 Builder 上做验证，我们仍然无法避免在对象上做验证，这将导致验证代码的冗余&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;，相同功能的代码冗余是各种 bug 的根源。&lt;/p&gt;

&lt;p&gt;更不能在 setter 方法里验证。因为如果对象的状态是由多个参数构成的，在一个 setter 中是无法验证由多个参数构成的状态是否合理的。&lt;/p&gt;

&lt;h3 id=&quot;参数拷贝&quot;&gt;参数拷贝&lt;/h3&gt;

&lt;p&gt;原文也提到了复制参数，即我们从 Builder 获取到参数之后，要防御性拷贝之后，再传到对象的构造器中。&lt;/p&gt;

&lt;p&gt;之所以要做防御性拷贝是考虑到对象的安全，对象在创建成功之后，便不应该受到外界的影响，Effective Java 的 item 39 就是这样的一个例子；&lt;/p&gt;

&lt;div  class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Broken &quot;immutable&quot; time period class&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Period&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

   &lt;span class=&quot;cm&quot;&gt;/**
    * @param start the beginning of the period
    * @param end the end of the period; must not precede start * @throws IllegalArgumentException if start is after end
    * @throws NullPointerException if start or end is null
    */&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Period&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; after &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;end&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Remainder omitted&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这段代码试图将 Period 设计为一个不可变对象（immutable），但却是一个失败的例子。&lt;/p&gt;

&lt;div  class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Attack the internals of a Period instance&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Period&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Period&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setYear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Modifies internals of p!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;因为 Date 是一个可变（mutable）对象，Period 的设计是失败的。解决方法就是防御性拷贝：&lt;/p&gt;

&lt;div  class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Repaired constructor - makes defensive copies of parameters&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Period&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;end&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; after &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样就不存在这种问题了，参数传入之后很好的和外界隔离开来（&lt;span class=&quot;codespan&quot;&gt;start()&lt;/span&gt;和&lt;span class=&quot;codespan&quot;&gt;end()&lt;/span&gt;方法也有相同的问题，这里就不展开了）。&lt;/p&gt;

&lt;h3 id=&quot;在-builder-中验证-fields-的场景&quot;&gt;在 Builder 中验证 fields 的场景&lt;/h3&gt;

&lt;p&gt;除此之外原文中还提到：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;对多个参数强加约束条件的另一种方法是，用多个 setter 方法对某个约束条件必须持有的所有参数进行检查。如果该约束条件没有得到满足，setter 方法就会抛出&lt;span class=&quot;codespan&quot;&gt;IllegalArgumentsException&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这似乎表明，我们除了可以在&lt;span class=&quot;codespan&quot;&gt;build()&lt;/span&gt;方法上验证， 也可以在 setter 上验证。但这和我们上面看到的解释不是有冲突吗？&lt;/p&gt;

&lt;p&gt;其实不是这样的。如果你有 web 开发的经历就知道，验证用户提交的表单的最好方法是，不仅要提供后端验证，也要提供前端验证。后端验证是为了保证数据一定是合理的，而前端验证是为了让错误尽早反馈给用户。因为前端的验证是可以人为跳过的（只要懂一点 js 就可以自己伪造请求），所以前端验证的目的并非保证数据合理。前端验证除了可以让错误尽快反馈给用户，也可以节省 HTTP 的请求数。&lt;/p&gt;

&lt;p&gt;所以，如果某个状态由多个参数构成，我们可以在一个 setter 中赋值并验证这些参数的状态。比如我们有这样一个 build 和 setter 方法：&lt;/p&gt;

&lt;div  class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// builder 的 setter 方法&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setStartAndEnd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;c1&quot;&gt;// 验证 start &amp;lt;= end，throw IllegalArgumentsException&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 赋值     &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// builder 的 build 方法&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeObject&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SomeObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 验证状态，throw IllegalStateException &lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里我们可以尽早的验证传入的 start 和 end 是否满足要求。同时要注意，对象上的验证仍不可省略。&lt;/p&gt;

&lt;p&gt;其实也有在 Builder 的 setter 中验证而不必在对象上验证参数的场景，stackexchange 的这个&lt;a href=&quot;https://softwareengineering.stackexchange.com/a/241319&quot;&gt;回答&lt;/a&gt;也提到了这种可能&lt;sup id=&quot;fnref:2:1&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;。在这个场景中，setter 方法的参数类型和实际创建对象的参数类型不一致，那么，setter 方法必须独自验证自己的参数的状态，而对象则在创建时验证对象入参的状态。&lt;/p&gt;

&lt;div  class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// builder 的 setter 方法&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setStartAndEnd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;c1&quot;&gt;// 验证 start &amp;lt;= end，throw IllegalArgumentsException&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 赋值&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;period&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Period&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// builder 的 build 方法&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeObject&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SomeObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 验证状态，throw IllegalStateException &lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如代码所示，builder 的 setter 方法入参是两个 Date，而构造函数的入参是 Period(实际是 Builder) 。&lt;/p&gt;

&lt;h3 id=&quot;错误处理&quot;&gt;错误处理&lt;/h3&gt;

&lt;p&gt;还有一点不知道大家有没有注意到，如果是 setter 中参数错误，应该抛出 IllegalArgumentsException 异常，而如果是在对象 fields 上验证错误，应该抛出 IllegalStateException 异常。这是符合异常的规范要求的。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Exception&lt;/th&gt;
      &lt;th&gt;Occasion for Use(使用场景)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;IllegalArgumentsException&lt;/td&gt;
      &lt;td&gt;Non-null parameter value is inappropriate&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;IllegalStateException&lt;/td&gt;
      &lt;td&gt;Object state is inappropriate for method invocation&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;NullPointerException&lt;/td&gt;
      &lt;td&gt;Parameter value is null where prohibited&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;IndexOutOfBoundsException&lt;/td&gt;
      &lt;td&gt;Index parameter value is out of range&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ConcurrentModificationException&lt;/td&gt;
      &lt;td&gt;Concurrent modification of an object has been detected where it is prohibited&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;UnsupportedOperationException&lt;/td&gt;
      &lt;td&gt;Object does not support method&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;如上表所示。通常 setter 的参数验证可以类比于 web 的前端验证，验证的是参数是否合法，而对象上的验证则是验证构成对象的状态是否合法。&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;stackoverflow 上的这个问题 &lt;a href=&quot;https://stackoverflow.com/questions/38173274/builder-pattern-validation-effective-java&quot;&gt;builder-pattern-validation-effective-java&lt;/a&gt; 的解答了这个问题，在 object 上验证 fields 更规范，因为实际上要验证的就是 object 的 fields 而不是 builder 的，builder 只是一个方便创建对象的工具 &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;stackexchange 上的 &lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/241309/builder-pattern-when-to-fail&quot;&gt;builder-pattern-when-to-fail&lt;/a&gt; 的解答深入讨论了这个问题，而且存在不少争论，不过大体上还是认同的居多 &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:2:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 21 Nov 2017 22:26:00 +0800</pubDate>
        <link>http://wulfric.me/2017/11/builder-validate-fields/</link>
        <guid isPermaLink="true">http://wulfric.me/2017/11/builder-validate-fields/</guid>
        
        <category>java</category>
        
        <category>effective java</category>
        
        <category>builder</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title>invariant 释义</title>
        <description>&lt;p&gt;Effective Java 的 &lt;a href=&quot;/2017/11/effetive-java-2#Item2&quot;&gt;item 2&lt;/a&gt; 的 Builder 模式可以在 Builder 的 build 中检查参数是否符合约束条件，原文和中文版译文是这样的：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Like a constructor, a builder can impose invariants on its parameters. The build method can check these invariants.&lt;/p&gt;

  &lt;p&gt;builder 像构造器一样，可以对其参数强加约束条件。build 方法可以检验这些约束条件。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在看这一段的时候并不明白 invariant 的具体含义。&lt;/p&gt;

&lt;p&gt;invariant 在词典里的字面意思是&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;n.&lt;/em&gt; 不变式，不变量&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;按照这样的字面意思很难理解 'A builder can impose invariants on its parameters' 这句话：builder 强加的是什么不变式或者不变量呢？&lt;/p&gt;

&lt;h3 id=&quot;参考释义&quot;&gt;参考释义&lt;/h3&gt;

&lt;p&gt;我们先看下在维基百科 &lt;a href=&quot;https://www.wikiwand.com/en/Invariant_(computer_science)&quot;&gt;invariant&lt;/a&gt; 词条的定义：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In computer science, an invariant is a condition that can be relied upon to be true during execution of a program, or during some portion of it. It is a logical assertion that is held to always be true during a certain phase of execution. For example, a loop invariant is a condition that is true at the beginning and end of every execution of a loop.&lt;/p&gt;

  &lt;p&gt;在计算机科学中，invariant 就是在程序的执行过程或部分执行过程中，可以认为绝对正确的条件。它是在执行的某个阶段中总是 true 的逻辑断言。比如，循环不变性约束条件就是在循环每次执行的开始和结束都是 true 的条件。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在没有完全理解的情况下看这段介绍是有点摸不着头脑，弄明白之后再看倒是能看得懂了 -.- 而且我觉得该词条中使用的例子（循环不变式和 MU puzzle）都不太方便理解，反而是 &lt;a href=&quot;https://www.wikiwand.com/en/Class_invariant&quot;&gt;class invariant&lt;/a&gt; 更容易理解一点。&lt;/p&gt;

&lt;h3 id=&quot;示例&quot;&gt;示例&lt;/h3&gt;

&lt;p&gt;网络的其他地方也可以找到解答&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;，但我想用一个更简单的例子来说明：我们想要实现一个加法运算的函数，它接受两个整数作为参数，并输出二者相加的和。&lt;/p&gt;

&lt;div  class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2147483647&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2147483646&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;执行这段代码，我们发现 add 的结果是 -3。为什么是 -3 相信大家都比较好理解：a + b 溢出了 int 的范围。这里我们就发现了 add 方法的一个 invariant：两个正整数相加，结果必须为正整数。而目前的这个 add 方法显然没有做好这个保证。&lt;/p&gt;

&lt;p&gt;再来看看 class invariant。在维基的词条中给出了一个 D 语言的例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-D&quot;&gt;class Date {
  int day;
  int hour;

  invariant() {
    assert(1 &amp;lt;= day &amp;amp;&amp;amp; day &amp;lt;= 31);
    assert(0 &amp;lt;= hour &amp;amp;&amp;amp; hour &amp;lt; 24);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;D 语言原生支持对类的 invariant 验证。Date 的 day 必然是 1 到 31，而 hour 必然是 0 到 23，这两个条件就是 Date 类的 invariant 条件。Java 语言的 Bean Validation 其实就是一种 class invariant。&lt;/p&gt;

&lt;h3 id=&quot;根据释义理解-builder-模式中的-invariant&quot;&gt;根据释义理解 Builder 模式中的 invariant&lt;/h3&gt;

&lt;p&gt;所谓 invariant，就是针对某个主体（subject，比如对象，方法等）的一些「绝对真理」式的约束，不论该主体处于何种状态或阶段，都必须满足这些约束条件。它们不受状态和阶段的转移影响，即所谓不变性。所以，在本文中，我们将 invariant 翻译成「不变性约束条件」。&lt;/p&gt;

&lt;p&gt;事实上 &lt;a href=&quot;https://book.douban.com/subject/1888733/&quot;&gt;Java Concurrency in Practice&lt;/a&gt; 这本书才是让我理解 invariant 的关键，因为在并发条件下，一个类的不变性约束条件极有可能被破坏掉，我们也很容易通过这种破坏理解什么是 class invariant：对类的不变性约束条件。&lt;/p&gt;

&lt;p&gt;代码示例如下&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;

&lt;div  class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// &quot;mutable&quot; time period class&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Period&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getEnd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setEnd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果有两个线程都可以操作 Period 的对象，每个线程都可以设置 start 和 end，可想而知对于 Period 的实例来说，因为缺乏必要的验证，&lt;span class=&quot;codespan&quot;&gt;start &amp;lt;= end&lt;/span&gt;这个 invariant 条件很容易被破坏。&lt;/p&gt;

&lt;p&gt;回到 Effective Java 中的 Builder 模式。Builder 只是一个方便创建对象的工具，这里面所说的 invariant 其实就是对应类的 invariant，即要满足类所映射的现实世界的约束。&lt;/p&gt;

&lt;h3 id=&quot;invariant-与-immutable&quot;&gt;invariant 与 immutable&lt;/h3&gt;

&lt;p&gt;将 invariant 翻译成不变性&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;容易和 immutable 混淆，即使二者的意思差别很大。我们在「Java 编程思想」这本书的中文版中就发现了这个错误：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Integer 类（以及基本的“封装器”类）用简单的形式实现了“不变性”：它们没有提供可以修改对象的方法。 若确实需要一个容纳了基本数据类型的对象，并想对基本据类型进行修改，就必须亲自创建它们。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;注意这个翻译是不好的。immutable 翻译成不可变更好。虽然我在本文中将 invariant 翻译成不变性约束条件，但约束条件其实是一个隐含的意思，并非字面意思，正常情况下还是翻译成不变性比较好。因此，immutable 的翻译应能够很好地区分 invariant 才是。&lt;/p&gt;

&lt;p&gt;invariant 指的是对对象的某些约束条件，而 immutable 指的是对象本身是不可变的。比如我们用经纬度来表示地球表面的一个点，这个类是 Point，它有两个参数：经度和纬度。所谓 invariant，就是说这个类的经度参数必须在 -180 到 180 之间，而纬度必须在 -90 到 90 之间。无论是构造器还是 setter 方法都必须验证这个 invariant 条件。所谓 immutable，指的是为了方便地实现线程安全类，我们将 Point 设计为 immutable 的，即经度和纬度属性都是 final 的，且不能提供 setter 方法。一旦实例化一个 point，它就不能再被修改，而只能通过重新 new 一个新的实例来代替旧的 point。&lt;/p&gt;

&lt;p&gt;可见，invariant 和 immutable 是无关的，不管一个类是不是 immutable 的，它都必须受到 invariant 条件的制约（即谓不变性），否则它产生的对象就可能是无效的。&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;stackoverflow 上的 &lt;a href=&quot;https://stackoverflow.com/questions/112064/what-is-an-invariant&quot;&gt;what-is-an-invariant&lt;/a&gt; 对 invariant 的解释也较为浅显，可以参考 &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;代码改编自 &lt;a href=&quot;https://book.douban.com/subject/2696119/&quot;&gt;Effective Java&lt;/a&gt; Item 39 &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/1888733/&quot;&gt;Java Concurrency in Practice&lt;/a&gt; 这本书将 invariant 翻译成不变性 &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 19 Nov 2017 15:26:00 +0800</pubDate>
        <link>http://wulfric.me/2017/11/what-is-invariant/</link>
        <guid isPermaLink="true">http://wulfric.me/2017/11/what-is-invariant/</guid>
        
        <category>java</category>
        
        <category>effective java</category>
        
        <category>invariant</category>
        
        <category>builder</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title>Effective-Java-创建和销毁对象</title>
        <description>&lt;p&gt;Effective Java[EJ] 的第二章讲的是创建和销毁对象：在什么情况下需要创建对象，怎样创建；在什么情况下需要避免创建对象，怎样避免；如何按照既定顺序销毁对象，如何在销毁对象前正确清理现场。&lt;/p&gt;

&lt;h2 id=&quot;Item1&quot;&gt;使用静态工厂方法而不是构造器&lt;/h2&gt;

&lt;p&gt;创建对象的最基础最常用的方法是通过构造函数 new 出来。但在实际的复杂业务环境中，往往显得太简单，不能很好的满足各种业务需求，而且很有可能使代码变得混乱。&lt;/p&gt;

&lt;p&gt;你可以考虑为你的类提供一个静态工厂方法。静态工厂方法是一个返回类的示例的静态方法，如：&lt;/p&gt;

&lt;div  class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TRUE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过静态工厂方法获取实例拥有以下优势：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;静态工厂方法可以根据方法名表明自己的作用，比如 valueOf 表示获取值，newInstance 表示创建新实例，getInstance 一般意味着拿到一个重用的实例。如果一个类需要提供不同的实例，静态工厂方法可以很清晰的表明自己，而构造器由于方法名必须和类名一致，容易让人感到混乱；&lt;/li&gt;
  &lt;li&gt;静态工厂方法在调用时不一定会创建对象，比如 Boolean.valueOf 就不会创建对象；&lt;/li&gt;
  &lt;li&gt;构造器会返回一个确定的类型（当前类），而静态工厂方法可以返回 subtype（子类，接口类），这在 java.util.Collections 中用的非常多；&lt;/li&gt;
&lt;/ul&gt;

&lt;div  class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 这个接口可以返回所有实现了 Map 的接口的类的实例&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AbstractMap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 这个接口可以返回所有继承了 AbstractMap 的类的实例&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;让开发者更关注返回对象的接口而不是具体的实现类；&lt;/li&gt;
  &lt;li&gt;方便维护。比如一个接口返回 EnumSet，在实现上可以返回各种 EnumSet 的子类型，升级之后也可以更改返回的类型。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个典型的例子就是服务提供框架（TODO）。&lt;/p&gt;

&lt;p&gt;使用静态工厂方法的劣势：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;只有静态工厂方法的类，无法创建子类来继承；&lt;/li&gt;
  &lt;li&gt;不能让人一眼看出来是重要的创建对象的方法（和构造函数相比），只能在注释中写明 。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;常用的静态工厂方法的名字有：valueOf, of,newInstance, getInstance, getType, newType 等。&lt;/p&gt;

&lt;p&gt;当你编写类的时候，请先考虑使用静态工厂方法，如果确定不需要，再使用构造器。&lt;/p&gt;

&lt;h2 id=&quot;Item2&quot;&gt;构造函数参数过多的时候可以考虑 Builder&lt;/h2&gt;

&lt;p&gt;静态工厂方法和构造器有一个共同的局限：不能很好的扩展到大量的可选参数。书中给出了这样一个例子：&lt;/p&gt;

&lt;div  class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Telescoping constructor pattern - does not scale well!&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NutritionFacts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ... field 定义&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NutritionFacts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servingSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NutritionFacts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servingSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NutritionFacts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servingSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NutritionFacts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servingSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sodium&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NutritionFacts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servingSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sodium&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carbohydrate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样的构造函数想必在没有充分优化的代码中很常见。客户端想要的实例可能有各种情况的默认值，类就要为各种情况都提供构造器，代码显得非常臃肿；当获取实例的时候，冗长的参数列表也很容易导致参数填写出错。静态工厂方法也是如此。&lt;/p&gt;

&lt;p&gt;JavaBean 可以避免这种问题。JavaBean 在现代 Java 代码中应该说使用的非常频繁了（序列化，对象持久化等）。客户端先 new 一个空对象，然后调用 setter 方法设置属性。JavaBean 代码没那么臃肿了，同时也不容易填错参数，但是一样有缺点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;代码长，每个参数都需要提供 setter 方法；setter 方法通常返回值是 void，这意味着客户端代码只能一行一行 set，不能链式调用；&lt;/li&gt;
  &lt;li&gt;JavaBean 无法实现不可变对象，因为随时可以执行 setter 方法，对象的状态不可控。JavaBean 极有可能出现不一致的情况，对客户端来说，它并不知道这个 JavaBean 是否已经完成构建（你并不知道某个 setter 是尚未执行还是不需要执行），这导致该对象是线程不安全的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Builder 模式可以很好的兼顾安全和代码可读性。Builder 是目标类的静态成员类，在 Builder 类中处理实际参数的设置。客户端通过 Builder 类设置参数，然后由无参的 build 方法获取所需的不可变对象。&lt;/p&gt;

&lt;div  class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Builder 模式&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NutritionFacts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servingSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sodium&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carbohydrate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 必需参数&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servingSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 可选参数 - 初始化为默认值&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calories&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fat&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sodium&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carbohydrate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servingSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;servingSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servingSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;servings&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sodium&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sodium&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;carbohydrate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carbohydrate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NutritionFacts&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NutritionFacts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NutritionFacts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;servingSize&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;servingSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;servings&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;servings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;calories&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;calories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fat&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sodium&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sodium&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;carbohydrate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;carbohydrate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可见，NutritionFacts 是不可变的；Builder 的 setter 方法返回 this，这样可以链式调用 setter，如下所示：&lt;/p&gt;

&lt;div  class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;NutritionFacts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cocaCola&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NutritionFacts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;240&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;calories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sodium&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;carbohydrate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;动态语言如 Python 可以通过参数默认值实现类似效果，比如：&lt;/p&gt;

&lt;div  class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Builder 模式代码易编写，易阅读，同时可以实现不可变对象，因此是线程安全的。除此之外：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;参数可检查，可以在 Builder 的 build 中检查参数是否符合 invariant 约束条件（见 &lt;a href=&quot;/2017/11/what-is-invariant&quot;&gt;invariant 释义&lt;/a&gt;）。约束条件的检查应该在 object 的 fields 上而不是 Builder 的 fields 上， 否则约束条件还是有可能被破坏（&lt;a href=&quot;/2017/11/builder-validate-fields&quot;&gt;为什么要在对象的 fields 上验证&lt;/a&gt;）；&lt;/li&gt;
  &lt;li&gt;可以有多个 varargs（每个 setter 都可以），非常灵活；&lt;/li&gt;
  &lt;li&gt;创建对象时可以自动填入某些字段，例如每次创建对象时自动增加序列号；&lt;/li&gt;
  &lt;li&gt;如果 builder 是外部类，那么设置了参数的 builder 是一个很好的静态抽象工厂&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当然 Builder 模式也有自身的缺点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;创建 Builder 导致的潜在的性能问题，一般来说几乎可以忽略不计，但在某些性能敏感的场合就必须考虑到这种损耗；&lt;/li&gt;
  &lt;li&gt;写起来稍微有点麻烦，因此只适用于参数很多，定制化很强的场景（要考虑到未来的情况，一个类很有可能由简单变得复杂）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;随着代码的积累可能既有构造器也有 Builder，这使得代码显得混乱不易控制，因此推荐优先使用 Builder。&lt;/p&gt;

&lt;h2 id=&quot;Item3&quot;&gt;使用私有构造器或枚举类型强化单例属性&lt;/h2&gt;

&lt;p&gt;单例也是一种常用的设计模式，Singleton 通常被用来代表那些本质上唯一的系统组件，比如窗口管理器或者文件系统。但 Singleton 使得测试更困难：无法使用 mock 的替代实现，除非实现了一个可以看做该类型的接口。&lt;/p&gt;

&lt;p&gt;常用的两个实现单例方法：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;实例成员是一个 final 的变量&lt;/li&gt;
&lt;/ul&gt;

&lt;div  class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Singleton with public final field&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Elvis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Elvis&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INSTANCE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Elvis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Elvis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;leaveTheBuilding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;通过一个静态工厂方法返回&lt;/li&gt;
&lt;/ul&gt;

&lt;div  class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Singleton with static factory&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Elvis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Elvis&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INSTANCE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Elvis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Elvis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Elvis&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INSTANCE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;leaveTheBuilding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;需要注意，享有特权的客户端可以借助 AccessibleObject.setAccessible 方法，通过反射机制（Item 53）调用私有构造器。如果需要抵御这种攻击，可以修改构造器，让它在被要求创建第二个实例的时候抛出异常。&lt;/p&gt;

&lt;p&gt;得益于现代 JVM 的优化，二者性能上没啥区别；前者简单，但后者更加灵活，可以支持全局单例，线程内单例等；而且在泛型方面也更有优势。&lt;/p&gt;

&lt;p&gt;前两种实现有这么一个问题：容易在序列化的时候踩坑。因为每次反序列化都会创建一个新的对象，所以需要添加一个 readResolve 方法：&lt;/p&gt;

&lt;div  class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// readResolve method to preserve sigleton property&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readResolve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Return the one true Elvis and let the garbage collector&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// take care of the Elvis impersonator.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INSTANCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在更推荐使用枚举来实现单例，它和 public field 方法是一样的，但是自带序列化支持，可以防范复杂的序列化和反射攻击。单元素的枚举类型已经成为实现 Singleton 的最佳方法。&lt;/p&gt;

&lt;div  class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Enum singleton - the prefered approach&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Elvis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;INSTANCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;leaveTheBuilding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;Item4&quot;&gt;使用私有构造器强制禁止实例化&lt;/h2&gt;

&lt;p&gt;有些类就是需要设计成不能实例化的，比如 util 工具类，Math 类，实现同一接口的对象的工厂方法等等。对于这些类，可以提供一个私有的构造器，这样就不能实例化了。&lt;/p&gt;

&lt;div  class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Noninstantiable utility class&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UtilityClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Suppress default constructor for noninstantiability&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UtilityClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AssertionError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Remainder omitted&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;缺点是这种类也无法继承了。&lt;/p&gt;

&lt;h2 id=&quot;Item5&quot;&gt;避免创建不必要的对象&lt;/h2&gt;

&lt;p&gt;如果对象可重用，尽量重用而不是每次都新建，这样能够节省资源。如果对象是不可变的，它就始终可以被重用。&lt;/p&gt;

&lt;p&gt;对于同时提供了静态工厂方法（&lt;a href=&quot;#Item1&quot;&gt;Item 1&lt;/a&gt;）和构造器的不可变类，通常可以使用静态工厂方法而不是构造器，以避免创建不必要的对象。&lt;/p&gt;

&lt;p&gt;如果一个属性初始化之后就不再变化，并且会被多次使用，它应该被当做常量（static final field），尽量不要当做变量。&lt;/p&gt;

&lt;p&gt;有一种容易忽略的不必要创建对象的场合：基本类型的自动装箱。如下所示：&lt;/p&gt;

&lt;div  class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Hideously slow program! Can you spot the object creation?&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MAX_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面这段代码可以正常运行，但是很慢，因为 sum 是 Long 类型，而 i 是 long 类型，执行&lt;span class=&quot;codespan&quot;&gt;sum += i&lt;/span&gt;的时候会自动给 i 装箱 Long，然后执行计算。可想而知自动装箱执行了 Integer.MAX_VALUE 次，也创建了 Integer.MAX_VALUE 这么多中间对象。&lt;/p&gt;

&lt;p&gt;解决方法：将&lt;span class=&quot;codespan&quot;&gt;Long sum = 0L&lt;/span&gt;改成&lt;span class=&quot;codespan&quot;&gt;long sum = 0&lt;/span&gt;即可，这样就不存在自动装箱了。但不能将&lt;span class=&quot;codespan&quot;&gt;long i = 0&lt;/span&gt;改成&lt;span class=&quot;codespan&quot;&gt;Long i = 0L&lt;/span&gt;，因为 Long 是不可变对象，所以在进行加法的时候，事实上是每次都要创建 Long 对象，速度依然会很慢，但 long 没有对象创建，只是基本类型，速度会好很多。&lt;/p&gt;

&lt;p&gt;这个例子表明，要优先使用基本类型而不是装箱基本类型，要当心无意识的自动装箱。&lt;/p&gt;

&lt;p&gt;但是实际使用中恐怕还是装箱类型多一些，毕竟泛型只支持装箱类型不支持基本类型。书中也表示，小对象的创建和销毁是很轻量的操作，通过创建对象使得程序简洁、清晰、功能强大，这是一件好事。&lt;/p&gt;

&lt;p&gt;在提倡使用保护性拷贝的时候，因为重用对象要付出的代价要远远大于因创建重复对象而付出的代价。必要时如果没能实施保护性拷贝，将会导致潜在的错误和安全漏洞；而不必要的创建对象则只会影响程序的风格和性能。&lt;/p&gt;

&lt;h2 id=&quot;Item6&quot;&gt;消除过期的对象引用&lt;/h2&gt;

&lt;p&gt;Java 不能使用指针，过期的对象由系统自动回收（GC）。但是即使有 GC，也不能完全不关心内存管理，本节讲的就是这种情况。&lt;/p&gt;

&lt;p&gt;书中的 Stack 示例表明，如果没有及时清除过期引用，就可能导致出现内存泄露。一个过期引用没有清除的话，该对象所引用的其他对象也不会被清除了，随着这种过期引用的积累，可能会使程序发生 OOM 崩溃。&lt;/p&gt;

&lt;p&gt;解决方法就是 null 掉过期的引用。&lt;/p&gt;

&lt;p&gt;但是不应该对此过分小心，jvm的 GC 效率是很高的。时刻提醒自己要清除对象引用不仅麻烦，而且会让代码混乱。控制好变量的作用域，依赖正常的 GC 来做这件事情。&lt;/p&gt;

&lt;p&gt;在例子中，Stack 自己管理内存，所以就可能出现内存管理不善的问题。所以，当需要自己管理内存时，一定要注意潜在的内存泄露问题。&lt;/p&gt;

&lt;h2 id=&quot;Item7&quot;&gt;避免使用终结方法&lt;/h2&gt;

&lt;p&gt;终结方法（finalizer）通常是不可预测的，也是很危险的，一般情况下是不必要的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;finalizer 是 GC 调用的，GC 调用时间不可预测&lt;/li&gt;
  &lt;li&gt;性能变差&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;资源回收应该显式使用 try finally。&lt;/p&gt;

&lt;p&gt;finalizer 也有可以使用的场合，但都比较偏门，还是不要用了，真正需要的时候自然会想起来有这个东西的。&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Nov 2017 20:08:00 +0800</pubDate>
        <link>http://wulfric.me/2017/11/effective-java-2/</link>
        <guid isPermaLink="true">http://wulfric.me/2017/11/effective-java-2/</guid>
        
        <category>java</category>
        
        <category>effective java</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title>PHP headers already sent 原因分析</title>
        <description>&lt;p&gt;先上结论，为了避免 headers already sent 错误，你应该&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;检查 PHP 代码，确认 &amp;lt;?php 前没有空格和空行&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;避免在业务代码中使用 echo 和 print 系函数，只在框架组织 HTTP body 输出的时候使用，这些函数包括&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;print, echo, printf, vprintf&lt;/li&gt;
      &lt;li&gt;trigger_error, ob_flush, ob_end_flush, var_dump, print_r&lt;/li&gt;
      &lt;li&gt;readfile, passthru, flush, imagepng, imagejpeg&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;原因分析&quot;&gt;原因分析&lt;/h2&gt;

&lt;p&gt;最近上线代码之后遇到了一个问题，在某些情况下会抛出异常：Uncaught Exception: ErrorException: Severity: 2; Message: Cannot modify header information - headers already sent by…。而且这个异常并非总是会出现，在不了解原因的情况下想要在测试环境重现比较困难，以下是分析步骤。&lt;/p&gt;

&lt;h3 id=&quot;异常产生的原因&quot;&gt;异常产生的原因&lt;/h3&gt;

&lt;p&gt;它本质上是一个 &lt;strong&gt;E_WARNING&lt;/strong&gt;，被 error_handler 截获而抛出异常：&lt;/p&gt;

&lt;div  class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_error_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$severity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filepath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$severity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;error_reporting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$severity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      	&lt;span class=&quot;c1&quot;&gt;// db rollback
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ErrorException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Severity: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$severity&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;; Message: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$message&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 index.php 中我们设置 error_reporting 要报告 E_WARNING 错误，所以会走到这里并抛出异常。也就是说，我们需要找到 E_WARNING 抛出的位置和原因。&lt;/p&gt;

&lt;h3 id=&quot;e_warning-产生的原因&quot;&gt;E_WARNING 产生的原因&lt;/h3&gt;

&lt;div  class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Severity: Warning&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Message:  Cannot modify header information - headers already sent by (output started at .../application/controllers/my_script.php:xxx)&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Filename: libraries/Session.php&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个错误从字面理解，就是设置 header() 的时候发现 header 中已经有内容了，那么，在异常信息中， headers already sent by () 括号里的内容就很重要了，它表明了是那一行的输出导致了这个问题。按照定位的位置，是脚本中的一个&lt;span class=&quot;codespan&quot;&gt;printf&lt;/span&gt;语句；继续看，是 Session 中的 setcookie() 方法发现这个 printf 语句已经输出内容了。&lt;/p&gt;

&lt;p&gt;想要解决这个问题，可以使用 sprintf 来组装字符串，使用 fwrite 等标准输出将内容输出到控制台。&lt;/p&gt;

&lt;h3 id=&quot;为什么会出现-headers-already-sent&quot;&gt;为什么会出现 headers already sent&lt;/h3&gt;

&lt;p&gt;在 PHP 中，不能在&lt;span class=&quot;codespan&quot;&gt;header()&lt;/span&gt;之前 echo 任何内容，一旦 echo，PHP 会发送已有的 header 内容，我们做一下实验。&lt;/p&gt;

&lt;p&gt;在实验之前，你需要把&lt;span class=&quot;codespan&quot;&gt;php.ini&lt;/span&gt;中的 output_buffering 关闭或者设置一个很小的值。之后重启 php-fpm。&lt;/p&gt;

&lt;div  class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;PHP]
...
output_buffering &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样设置表明输出的 buffer 不超过 3 个字符。&lt;/p&gt;

&lt;p&gt;然后重现一下这个 bug：&lt;/p&gt;

&lt;div  class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'asd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a: b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用 curl 访问一下，返回的 HTTP body 是 asd 和一个 headers already sent 错误信息，&lt;span class=&quot;codespan&quot;&gt;curl -I http://localhost/test&lt;/span&gt;一下看看 header，发现 a: b 并没有输出到 header 中。&lt;/p&gt;

&lt;p&gt;echo 的内容超出了缓冲区限制的长度，便会作为 HTTP body 输出给 WEB 服务器。一旦 echo，PHP 输出 header 的任务就等于结束了，那么此时调用&lt;span class=&quot;codespan&quot;&gt;header()&lt;/span&gt;就会抛出 headers already sent 的错误。&lt;/p&gt;

&lt;p&gt;修改一下代码：&lt;/p&gt;

&lt;div  class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'b: c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'asd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a: b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时输出的 HTTP body 内容是相同的，但是 curl -I 看到的 header 中多了 b: c，说明 echo 之前的&lt;span class=&quot;codespan&quot;&gt;header()&lt;/span&gt;正确地输出了内容。&lt;/p&gt;

&lt;p&gt;setcookie 方法也会发送 header：&lt;span class=&quot;codespan&quot;&gt;set-cookie: xxx&lt;/span&gt;，所以一样会引起这个问题。&lt;/p&gt;

&lt;p&gt;在上面的例子中，我们将 output_buffering 设置为 3，如果 echo 的内容小于 3，是不会引起问题的，因为缓冲区缓冲了 echo 的内容，会在 header 输出之后再输出缓冲内容。在实际的应用中，可以给 output_buffering 一个稍大一些的值。&lt;/p&gt;

&lt;p&gt;但是，不能依赖 output_buffering 的大小，应该尽量避免在业务代码中使用 echo 和 print 系函数。&lt;/p&gt;

&lt;h2 id=&quot;怎样使用-echo&quot;&gt;怎样使用 echo&lt;/h2&gt;

&lt;p&gt;echo 很方便，古董 PHP 开发还会使用 echo 调试大法，而且我们要输出  HTTP 内容肯定要用到 echo 或者 print，怎么可能避免使用呢？&lt;/p&gt;

&lt;h3 id=&quot;业务代码中尽量避免&quot;&gt;业务代码中尽量避免&lt;/h3&gt;

&lt;p&gt;我们应该避免在业务中使用，而不是禁止使用。当使用 echo 的时候，因为上述原因出现 headers already sent 错误，要看 output_buffering 设置的大小和 echo 内容的长度，这给 debug 带来了很大的不确定性，测试环境很可能会漏掉这个 case。&lt;/p&gt;

&lt;p&gt;在业务中，可能用到 echo 的原因有：1. 调试代码，查看变量；2. 命令行脚本的输出。对于 1，建议通过调试工具调试，或者使用插件 &lt;a href=&quot;https://github.com/itsgoingd/clockwork&quot;&gt;clockwork&lt;/a&gt;；对于 2，可以在脚本中通过标准输出来输出重要内容，不需要使用 echo。&lt;/p&gt;

&lt;div  class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;fwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;STDOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果基于某种原因一定要使用，可以将一段输出用 ob_start 和 ob_end 包裹起来。被包裹的输出会进入内部缓冲区，在需要的时候再 flush 出来。&lt;/p&gt;

&lt;div  class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ob_start 的函数定义
&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ob_start&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callable&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$output_callback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$chunk_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PHP_OUTPUT_HANDLER_STDFLAGS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]]])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;codespan&quot;&gt;$chunk_size=0&lt;/span&gt;的时候，只有在关闭缓冲区的时候才会输出缓冲区的内容。&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;div  class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;ob_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 打开缓冲区
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'asd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a: b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;ob_end_flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 关闭缓冲区，将缓冲区的内容输出到 HTTP body
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一般框架的输出都是这样设计的，echo 会包裹在 ob_start 和 ob_end 之间。&lt;/p&gt;

&lt;h3 id=&quot;ob_start-的问题&quot;&gt;ob_start 的问题&lt;/h3&gt;

&lt;p&gt;ob_start 不能解决 PHP 代码不规范导致的 headers already sent：&lt;/p&gt;

&lt;div  class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;           &lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;ob_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 打开缓冲区
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'asd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a: b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;ob_end_flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 关闭缓冲区，将缓冲区的内容输出到 HTTP body
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 这段代码也会报错，因为文件开头不应该有空格或空行
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用 ob_start 需要及时的将数据输出出去，否则可能会因为字符串拼接和二进制内容冲突：&lt;/p&gt;

&lt;div  class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;ob_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 打开缓冲区
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'asd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;imagepng&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;ob_end_flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 关闭缓冲区，将缓冲区的内容输出到 HTTP body
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// asd 和 imagepng() 的内容混在一起，输出的图片不可用
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;好的实践&quot;&gt;好的实践&lt;/h3&gt;

&lt;p&gt;综上所述，一个良好的实践是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;output_buffering 关闭或者设置一个较小的数值&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;如非必要，不使用 echo 和 print 系函数&lt;/li&gt;
  &lt;li&gt;使用 echo 时，尽量用 ob_start 和 ob_end 包裹&lt;/li&gt;
  &lt;li&gt;使用 ob_start 和 ob_end 包裹时，对自己包裹的内容有清晰的认识，尽量不要跨函数使用 ob_start 和 ob_end&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;参见 &lt;a href=&quot;https://stackoverflow.com/questions/8028957/how-to-fix-headers-already-sent-error-in-php&quot;&gt;stackoverflow 回答&lt;/a&gt;，除此之外，还有 UTF-8 BOM 等其他原因 &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;使用 ob_start 的时候不受 php.ini 中的 output_buffering 大小的影响 &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;参见&lt;a href=&quot;https://help.aliyun.com/knowledge_detail/36512.html&quot;&gt;PHP程序访问报错Warning: Cannot modify header information - headers already sent by&lt;/a&gt; 和 &lt;a href=&quot;http://php.net/manual/zh/outcontrol.configuration.php&quot;&gt;PHP: 运行时配置 - Manual&lt;/a&gt;，开启 output_buffering 可能影响 PHP 执行效率 &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 22 Sep 2017 18:48:00 +0800</pubDate>
        <link>http://wulfric.me/2017/09/php-headers-already-sent/</link>
        <guid isPermaLink="true">http://wulfric.me/2017/09/php-headers-already-sent/</guid>
        
        <category>php</category>
        
        <category>echo</category>
        
        <category>print</category>
        
        <category>ob_start</category>
        
        <category>HTTP</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title>PHP7 安装 xhprof</title>
        <description>&lt;p&gt;xhprof 是 Facebook 09 年出的一个很优秀的 PHP profiler 工具，但 Facebook 后来迁移到 hhvm，早已不再维护，它在 PHP7 下有诸多 bug。&lt;/p&gt;

&lt;h2 id=&quot;使用兼容的-xhprof-安装&quot;&gt;使用兼容的 xhprof 安装&lt;/h2&gt;

&lt;p&gt;xhprof 已经很久没有更新了，使用他人的repo&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;div  class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~
git clone https://github.com/longxinH/xhprof
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;xhprof/extension/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查找 php7 下的 phpize 的位置。&lt;/p&gt;

&lt;div  class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;which php71 &lt;span class=&quot;c&quot;&gt;# 查看 php71 的位置&lt;/span&gt;
ll /usr/bin/php71 &lt;span class=&quot;c&quot;&gt;# 查看软链接的位置&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; /opt/remi/php71/root/usr/bin/ &lt;span class=&quot;c&quot;&gt;# 查看所有命令&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装插件。&lt;/p&gt;

&lt;div  class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/opt/remi/php71/root/usr/bin/phpize
./configure &lt;span class=&quot;nt&quot;&gt;--with-php-config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/remi/php71/root/usr/bin/php-config  &lt;span class=&quot;nt&quot;&gt;--enable-xhprof&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;make
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;重启 php-fpm。&lt;/p&gt;

&lt;div  class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service php71-php-fpm restart
php71 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;xhprof
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时，安装成功。我们配置一下 xhprof 插件：&lt;/p&gt;

&lt;div  class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;xhprof]
&lt;span class=&quot;nv&quot;&gt;extension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xhprof.so&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
xhprof.output_dir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/tmp/xhprof
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中 xhprof.output_dir 是 xhprof 的输出目录，每次执行 xhprof 的 save_run 方法时都会生成一个 run_id.project_name.xhprof 文件。这个目录在哪里并不重要。&lt;/p&gt;

&lt;h2 id=&quot;nginx-配置访问&quot;&gt;nginx 配置访问&lt;/h2&gt;

&lt;p&gt;当生成 .xhprof 文件之后，我们就可以利用 xhprof_lib 来展示结果了。&lt;/p&gt;

&lt;p&gt;创建文件夹 /var/www/html/xhprof，然后配置 nginx 如下&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;

&lt;div  class=&quot;language-nginx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/var/www/html/xhprof/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;server_name&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;your_host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.php&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;\.php&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;fastcgi_pass&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;fastcgi_index&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.php&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;fastcgi_param&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;SCRIPT_FILENAME&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$document_root$fastcgi_script_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fastcgi_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 /var/www/html/xhprof/xhprof_html 下创建 index.php&lt;/p&gt;

&lt;div  class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;phpinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;访问 http://your_host/index.php 查看是否正确显示 phpinfo。&lt;/p&gt;

&lt;p&gt;当配置成功之后，将 xhprof 中的 xhprof_lib 和 xhprof_html 两个文件夹复制到 /var/www/html/xhprof/ 下，然后访问 http://your_host/xhprof_html/index.php 即可。&lt;/p&gt;

&lt;p&gt;PS：安装 &lt;span class=&quot;codespan&quot;&gt;yum install graphviz&lt;/span&gt; 查看图形界面。&lt;/p&gt;

&lt;p&gt;修改 nginx 配置中的 root 直接指向 xhprof_html，配置如下：&lt;/p&gt;

&lt;div  class=&quot;language-nginx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/var/www/html/xhprof/xhprof_html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;server_name&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;your_host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.php&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;\.php&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;fastcgi_pass&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;fastcgi_index&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.php&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;fastcgi_param&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;SCRIPT_FILENAME&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$document_root$fastcgi_script_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fastcgi_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;因为 xhprof_html 下已经有 index.php 了，所以可以直接访问 http://your_host。&lt;/p&gt;

&lt;div  class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# nginx 指向的路径&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; /var/www/html/xhprof
footer.php  header.php  index.php  xhprof_html  xhprof_lib

&lt;span class=&quot;c&quot;&gt;# xhprof 保存的数据&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; /var/tmp/xhprof
5979c9dfe223a.your_project.xhprof  597aae1684192.your_project.xhprof
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;使用方法&quot;&gt;使用方法&lt;/h2&gt;

&lt;p&gt;和之前一样，将要检查性能的代码包裹起来就可以了。&lt;/p&gt;

&lt;div  class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;xhprof_enable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;XHPROF_FLAGS_CPU&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XHPROF_FLAGS_MEMORY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;// 要检查性能的代码
&lt;/span&gt; 
&lt;span class=&quot;nv&quot;&gt;$xhprof_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;xhprof_disable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;include_once&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;'/var/www/html/xhprof/xhprof_lib/utils/xhprof_lib.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;include_once&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;'/var/www/html/xhprof/xhprof_lib/utils/xhprof_runs.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$xhprof_runs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\XHProfRuns_Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$run_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$xhprof_runs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$xhprof_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'your_project'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当然这里也可以将前后的代码单独开一个php文件：header.php 和 footer.php。&lt;/p&gt;

&lt;div  class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// header.php
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;extension_loaded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'xhprof'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;include_once&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'xhprof_lib/utils/xhprof_lib.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;include_once&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'xhprof_lib/utils/xhprof_runs.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;xhprof_enable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;XHPROF_FLAGS_CPU&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XHPROF_FLAGS_MEMORY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div  class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// footer.php
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;extension_loaded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'xhprof'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$profiler_namespace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'your_project'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$xhprof_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;xhprof_disable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$xhprof_runs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XHProfRuns_Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$run_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$xhprof_runs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$xhprof_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$profiler_namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后用这两个文件包裹代码。如果是 Apache，可以在项目的 .htaccess 文件中添加：&lt;/p&gt;

&lt;div  class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#php_value auto_prepend_file /var/www/html/xhprof/header.php
#php_value auto_append_file /var/www/html/xhprof/footer.php
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果是 nginx + php-fpm，可以在php-fpm.d/www.conf 添加：&lt;/p&gt;

&lt;div  class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;php_value[auto_prepend_file] = /var/www/html/xhprof/header.php
php_value[auto_append_file] = /var/www/html/xhprof/footer.php
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;个人还是更喜欢在需要的地方手动 require：&lt;/p&gt;

&lt;div  class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;include_once&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;'/var/www/html/xhprof/header.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 要检查性能的代码
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;include_once&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;'/var/www/html/xhprof/footer.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样更加灵活，而且不会每个请求都生成一份报告，只在需要的时候生成。&lt;/p&gt;

&lt;h2 id=&quot;notice&quot;&gt;Notice&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;如果遇到错误 failed to execute cmd: &quot; dot -Tpng&quot;. stderr: ` (&lt;a href=&quot;http://process:24220/&quot;&gt;process:24220&lt;/a&gt;): Pango-WARNING **: Invalid UTF-8 string passed to pango_layout_set_text() '。暂时不清楚怎么解决，可以选择避开它。将 xhprof_lib/utils/callgraph_utils.php 的 121，122 行的打印和 exit 注释掉。&lt;/li&gt;
  &lt;li&gt;如果遇到错误 &lt;span class=&quot;codespan&quot;&gt;Error: either we can not find profile data for run_id xxx or the threshold 0.01 is too small or you do not have 'dot' image generation utility installed&lt;/span&gt;，无法生成 png 图片，可能是因为生成的文件中有不能识别的字符，修复如下&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;：
    &lt;div  class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; dot -T&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 在 cmd 之后添加一个转码工作就可以了
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dot_script&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;iconv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ASCII//IGNORE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dot_script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;如果想要更好看的 UI，可以参考以下&lt;a href=&quot;https://lamosty.com/2015/03/19/profiling-wordpress-with-xhprof-on-mac-os-x-10-10/&quot;&gt;链接1&lt;/a&gt;，&lt;a href=&quot;http://blog.oneapm.com/apm-tech/235.html&quot;&gt;链接2&lt;/a&gt;，&lt;a href=&quot;https://tideways.io/profiler/xhprof-for-php7-php5.6&quot;&gt;链接3&lt;/a&gt; (手动搭免费）。&lt;/li&gt;
  &lt;li&gt;下面是一些参数说明&lt;/li&gt;
&lt;/ol&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;性能点&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Inclusive Time&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;包括子函数所有执行时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Exclusive Time/Self Time&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;函数执行本身花费的时间，不包括子树执行时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Wall Time&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;花去了的时间或挂钟时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;CPU Time&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;用户耗的时间 + 内核耗的时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Inclusive CPU&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;包括子函数一起所占用的 CPU&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Exclusive CPU&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;函数自身所占用的 CPU&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/phacility/xhprof/issues/82&quot;&gt;xhprof issue&lt;/a&gt; 和&lt;a href=&quot;http://www.jianshu.com/p/c420ebe6ce39&quot;&gt;某博文&lt;/a&gt;提到了一些替代 repo，除此之外还有 &lt;a href=&quot;https://github.com/tideways/php-profiler-extension&quot;&gt;tideways&lt;/a&gt; 等 &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;nginx 的配置参考了 &lt;a href=&quot;https://wizardforcel.gitbooks.io/nginx-doc/content/Text/6.5_nginx_php_fpm.html&quot;&gt; 某 gitbook&lt;/a&gt; 和 &lt;a href=&quot;https://www.nginx.com/resources/wiki/start/topics/examples/phpfcgi/&quot;&gt;nginx wiki&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;这个在网上很难找到解决方案，我在 PHP 的 bug 平台找到了它：&lt;a href=&quot;https://bugs.php.net/bug.php?id=58655&quot;&gt;链接&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 08 Aug 2017 10:51:00 +0800</pubDate>
        <link>http://wulfric.me/2017/08/php7-xhprof/</link>
        <guid isPermaLink="true">http://wulfric.me/2017/08/php7-xhprof/</guid>
        
        <category>php7</category>
        
        <category>xhprof</category>
        
        <category>php</category>
        
        
        <category>技术</category>
        
      </item>
    
  </channel>
</rss>
